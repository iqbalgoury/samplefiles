<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36 Edg/136.0.0.0" version="27.1.4">
  <diagram name="Page-1" id="GokQLcG7WO0pYvgW-zJp">
    <mxGraphModel dx="4169" dy="3577" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="mDrpf2TN0rHwM7id590o-1" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;" parent="1" source="bzycmvIp5_qkG32QMUx3-1" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="-220" y="180" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="bzycmvIp5_qkG32QMUx3-1" value="&lt;a href=&quot;https://copilot.microsoft.com/chats/RHDPdBvyvpDGnnrWRSW6V&quot;&gt;Microsoft Copilot: Your AI companion&lt;/a&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-570" y="230" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="bzycmvIp5_qkG32QMUx3-6" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0;exitDx=0;exitDy=0;" parent="1" source="bzycmvIp5_qkG32QMUx3-2" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="310" y="350" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="bzycmvIp5_qkG32QMUx3-2" value="" style="ellipse;whiteSpace=wrap;html=1;aspect=fixed;" parent="1" vertex="1">
          <mxGeometry x="190" y="230" width="80" height="80" as="geometry" />
        </mxCell>
        <mxCell id="bzycmvIp5_qkG32QMUx3-4" value="&lt;p style=&quot;overflow-wrap: break-word; margin: 6px 0px 10px; max-width: none; color: rgb(66, 66, 66); font-family: &amp;quot;Segoe Sans&amp;quot;, &amp;quot;Segoe UI&amp;quot;, &amp;quot;Segoe UI Web (West European)&amp;quot;, -apple-system, BlinkMacSystemFont, Roboto, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 16px; text-align: start; background-color: rgb(250, 250, 250);&quot;&gt;&lt;a href=&quot;https://cdn1-private.infotech.com/private_asset_archives/uploads/21969/Map-Your-Business-Architecture-to-Define-Your-Strategy.zip?Expires=1746636942&amp;amp;Signature=qb7lyRYatPvJBcTWGcS94Tm~XofcYWkefp7NIBDCYnLiJneAgGg2HeXWX5P8tQNg4sex3ENXRUD4rSU1b82uz2FGQ7qzguQDsDrNr2o6XaPWUx~dZLCHOc12usTXoMQGCdFLqt-Auya1kePpdOAIXHOYyET3RiksuI58DzGjRgHldEvC5aFtrAF8df~TyVxoGGpKZv1Ybi2bjfDafrSC33xtrxjkq8RE1dAnFZ5hbkJmfIDP9HP9rxowL7DMSwHiTIWWEvbS-edxhB40b3G1KMavXnQvdoxZWyo~ROnIO3HuZz~1dBLcHKfmVGlY9vErkpX1pkfN0GyEH71wldFdSw__&amp;amp;Key-Pair-Id=K3580I9TTO3F0A&quot;&gt;Access to this site is blocked&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;overflow-wrap: break-word; margin: 6px 0px 10px; max-width: none; color: rgb(66, 66, 66); font-family: &amp;quot;Segoe Sans&amp;quot;, &amp;quot;Segoe UI&amp;quot;, &amp;quot;Segoe UI Web (West European)&amp;quot;, -apple-system, BlinkMacSystemFont, Roboto, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 16px; text-align: start; background-color: rgb(250, 250, 250);&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;overflow-wrap: break-word; margin: 6px 0px 10px; max-width: none; color: rgb(66, 66, 66); font-family: &amp;quot;Segoe Sans&amp;quot;, &amp;quot;Segoe UI&amp;quot;, &amp;quot;Segoe UI Web (West European)&amp;quot;, -apple-system, BlinkMacSystemFont, Roboto, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 16px; text-align: start; background-color: rgb(250, 250, 250);&quot;&gt;&lt;a href=&quot;https://cdn1-private.infotech.com/private_asset_archives/uploads/21969/Map-Your-Business-Architecture-to-Define-Your-Strategy.zip?Expires=1746636942&amp;amp;Signature=qb7lyRYatPvJBcTWGcS94Tm~XofcYWkefp7NIBDCYnLiJneAgGg2HeXWX5P8tQNg4sex3ENXRUD4rSU1b82uz2FGQ7qzguQDsDrNr2o6XaPWUx~dZLCHOc12usTXoMQGCdFLqt-Auya1kePpdOAIXHOYyET3RiksuI58DzGjRgHldEvC5aFtrAF8df~TyVxoGGpKZv1Ybi2bjfDafrSC33xtrxjkq8RE1dAnFZ5hbkJmfIDP9HP9rxowL7DMSwHiTIWWEvbS-edxhB40b3G1KMavXnQvdoxZWyo~ROnIO3HuZz~1dBLcHKfmVGlY9vErkpX1pkfN0GyEH71wldFdSw__&amp;amp;Key-Pair-Id=K3580I9TTO3F0A&quot;&gt;https://cdn1-private.infotech.com/private_asset_archives/uploads/21969/Map-Your-Business-Architecture-to-Define-Your-Strategy.zip?Expires=1746636942&amp;amp;Signature=qb7lyRYatPvJBcTWGcS94Tm~XofcYWkefp7NIBDCYnLiJneAgGg2HeXWX5P8tQNg4sex3ENXRUD4rSU1b82uz2FGQ7qzguQDsDrNr2o6XaPWUx~dZLCHOc12usTXoMQGCdFLqt-Auya1kePpdOAIXHOYyET3RiksuI58DzGjRgHldEvC5aFtrAF8df~TyVxoGGpKZv1Ybi2bjfDafrSC33xtrxjkq8RE1dAnFZ5hbkJmfIDP9HP9rxowL7DMSwHiTIWWEvbS-edxhB40b3G1KMavXnQvdoxZWyo~ROnIO3HuZz~1dBLcHKfmVGlY9vErkpX1pkfN0GyEH71wldFdSw__&amp;amp;Key-Pair-Id=K3580I9TTO3F0A&lt;/a&gt;&lt;/p&gt;" style="ellipse;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-250" y="-1200" width="540" height="80" as="geometry" />
        </mxCell>
        <UserObject label="// /netlify/functions/openai.js&#xa;const fetch = require(&quot;node-fetch&quot;);&#xa;&#xa;&#xa;exports.handler = async (event, context) =&gt; {&#xa;  try {&#xa;    if (event.httpMethod !== &quot;POST&quot;) {&#xa;      return {&#xa;        statusCode: 405,&#xa;        body: JSON.stringify({ error: &quot;Method Not Allowed&quot; })&#xa;      };&#xa;    }&#xa;&#xa;&#xa;    const { userQuery, schema, envKey } = JSON.parse(event.body || &quot;{}&quot;);&#xa;&#xa;&#xa;    // Validate the client-supplied key.&#xa;    const ALLOWED_ENV_KEY = &quot;SECRET_ENV_KEY&quot;; // Hard-coded for this example&#xa;    if (envKey !== ALLOWED_ENV_KEY) {&#xa;      return {&#xa;        statusCode: 401,&#xa;        body: JSON.stringify({ error: &quot;Unauthorized&quot; })&#xa;      };&#xa;    }&#xa;&#xa;&#xa;    // Build the schema text from the structured object sent by the client.&#xa;    let schemaText = &quot;&quot;;&#xa;    if (Array.isArray(schema) &amp;&amp; schema.length) {&#xa;      schema.forEach(item =&gt; {&#xa;        if (item.table &amp;&amp; Array.isArray(item.columns)) {&#xa;          schemaText += &quot;Table &quot; + item.table + &quot;: Columns: &quot; + item.columns.join(&quot;, &quot;) + &quot;\n&quot;;&#xa;        }&#xa;      });&#xa;    } else {&#xa;      schemaText = &quot;No tables available.&quot;;&#xa;    }&#xa;&#xa;&#xa;    // Build the final prompt on the server.&#xa;    const prompt = &quot;Using SQLite syntax, based on the following schema:\n&quot; +&#xa;      schemaText +&#xa;      &quot;\nGenerate the SQL query for the following natural language description:\n\&quot;&quot; +&#xa;      userQuery +&#xa;      &quot;\&quot;\nReturn only the SQL query.&quot;;&#xa;&#xa;&#xa;    // Retrieve the OpenAI API key from your environment settings.&#xa;    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;&#xa;    if (!OPENAI_API_KEY) {&#xa;      return {&#xa;        statusCode: 500,&#xa;        body: JSON.stringify({ error: &quot;Server configuration error&quot; })&#xa;      };&#xa;    }&#xa;&#xa;&#xa;    // Call the OpenAI API.&#xa;    const openaiResponse = await fetch(&quot;https://api.openai.com/v1/chat/completions&quot;, {&#xa;      method: &quot;POST&quot;,&#xa;      headers: {&#xa;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#xa;        &quot;Authorization&quot;: `Bearer ${OPENAI_API_KEY}`&#xa;      },&#xa;      body: JSON.stringify({&#xa;        model: &quot;gpt-3.5-turbo&quot;,&#xa;        messages: [&#xa;          { role: &quot;system&quot;, content: &quot;You are a helpful SQL assistant.&quot; },&#xa;          { role: &quot;user&quot;, content: prompt }&#xa;        ]&#xa;      })&#xa;    });&#xa;&#xa;&#xa;    const data = await openaiResponse.json();&#xa;&#xa;&#xa;    return {&#xa;      statusCode: 200,&#xa;      body: JSON.stringify(data)&#xa;    };&#xa;&#xa;&#xa;  } catch (error) {&#xa;    return {&#xa;      statusCode: 500,&#xa;      body: JSON.stringify({ error: error.message })&#xa;    };&#xa;  }&#xa;};" link="// /netlify/functions/openai.js&#xa;const fetch = require(&quot;node-fetch&quot;);&#xa;&#xa;&#xa;exports.handler = async (event, context) =&gt; {&#xa;  try {&#xa;    if (event.httpMethod !== &quot;POST&quot;) {&#xa;      return {&#xa;        statusCode: 405,&#xa;        body: JSON.stringify({ error: &quot;Method Not Allowed&quot; })&#xa;      };&#xa;    }&#xa;&#xa;&#xa;    const { userQuery, schema, envKey } = JSON.parse(event.body || &quot;{}&quot;);&#xa;&#xa;&#xa;    // Validate the client-supplied key.&#xa;    const ALLOWED_ENV_KEY = &quot;SECRET_ENV_KEY&quot;; // Hard-coded for this example&#xa;    if (envKey !== ALLOWED_ENV_KEY) {&#xa;      return {&#xa;        statusCode: 401,&#xa;        body: JSON.stringify({ error: &quot;Unauthorized&quot; })&#xa;      };&#xa;    }&#xa;&#xa;&#xa;    // Build the schema text from the structured object sent by the client.&#xa;    let schemaText = &quot;&quot;;&#xa;    if (Array.isArray(schema) &amp;&amp; schema.length) {&#xa;      schema.forEach(item =&gt; {&#xa;        if (item.table &amp;&amp; Array.isArray(item.columns)) {&#xa;          schemaText += &quot;Table &quot; + item.table + &quot;: Columns: &quot; + item.columns.join(&quot;, &quot;) + &quot;\n&quot;;&#xa;        }&#xa;      });&#xa;    } else {&#xa;      schemaText = &quot;No tables available.&quot;;&#xa;    }&#xa;&#xa;&#xa;    // Build the final prompt on the server.&#xa;    const prompt = &quot;Using SQLite syntax, based on the following schema:\n&quot; +&#xa;      schemaText +&#xa;      &quot;\nGenerate the SQL query for the following natural language description:\n\&quot;&quot; +&#xa;      userQuery +&#xa;      &quot;\&quot;\nReturn only the SQL query.&quot;;&#xa;&#xa;&#xa;    // Retrieve the OpenAI API key from your environment settings.&#xa;    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;&#xa;    if (!OPENAI_API_KEY) {&#xa;      return {&#xa;        statusCode: 500,&#xa;        body: JSON.stringify({ error: &quot;Server configuration error&quot; })&#xa;      };&#xa;    }&#xa;&#xa;&#xa;    // Call the OpenAI API.&#xa;    const openaiResponse = await fetch(&quot;https://api.openai.com/v1/chat/completions&quot;, {&#xa;      method: &quot;POST&quot;,&#xa;      headers: {&#xa;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#xa;        &quot;Authorization&quot;: `Bearer ${OPENAI_API_KEY}`&#xa;      },&#xa;      body: JSON.stringify({&#xa;        model: &quot;gpt-3.5-turbo&quot;,&#xa;        messages: [&#xa;          { role: &quot;system&quot;, content: &quot;You are a helpful SQL assistant.&quot; },&#xa;          { role: &quot;user&quot;, content: prompt }&#xa;        ]&#xa;      })&#xa;    });&#xa;&#xa;&#xa;    const data = await openaiResponse.json();&#xa;&#xa;&#xa;    return {&#xa;      statusCode: 200,&#xa;      body: JSON.stringify(data)&#xa;    };&#xa;&#xa;&#xa;  } catch (error) {&#xa;    return {&#xa;      statusCode: 500,&#xa;      body: JSON.stringify({ error: error.message })&#xa;    };&#xa;  }&#xa;};" id="mDrpf2TN0rHwM7id590o-3">
          <mxCell style="whiteSpace=wrap;html=1;aspect=fixed;align=left;" parent="1" vertex="1">
            <mxGeometry x="-1030" y="-1010" width="450" height="450" as="geometry" />
          </mxCell>
        </UserObject>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
