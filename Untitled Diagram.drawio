<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36 Edg/136.0.0.0" version="27.1.4">
  <diagram name="Page-1" id="GokQLcG7WO0pYvgW-zJp">
    <mxGraphModel dx="4169" dy="4677" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="mDrpf2TN0rHwM7id590o-1" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;" parent="1" source="bzycmvIp5_qkG32QMUx3-1" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="-220" y="180" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="bzycmvIp5_qkG32QMUx3-1" value="&lt;a href=&quot;https://copilot.microsoft.com/chats/RHDPdBvyvpDGnnrWRSW6V&quot;&gt;Microsoft Copilot: Your AI companion&lt;/a&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-570" y="230" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="bzycmvIp5_qkG32QMUx3-6" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0;exitDx=0;exitDy=0;" parent="1" source="bzycmvIp5_qkG32QMUx3-2" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="310" y="350" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="bzycmvIp5_qkG32QMUx3-2" value="" style="ellipse;whiteSpace=wrap;html=1;aspect=fixed;" parent="1" vertex="1">
          <mxGeometry x="190" y="230" width="80" height="80" as="geometry" />
        </mxCell>
        <mxCell id="bzycmvIp5_qkG32QMUx3-4" value="&lt;p style=&quot;overflow-wrap: break-word; margin: 6px 0px 10px; max-width: none; color: rgb(66, 66, 66); font-family: &amp;quot;Segoe Sans&amp;quot;, &amp;quot;Segoe UI&amp;quot;, &amp;quot;Segoe UI Web (West European)&amp;quot;, -apple-system, BlinkMacSystemFont, Roboto, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 16px; text-align: start; background-color: rgb(250, 250, 250);&quot;&gt;&lt;a href=&quot;https://cdn1-private.infotech.com/private_asset_archives/uploads/21969/Map-Your-Business-Architecture-to-Define-Your-Strategy.zip?Expires=1746636942&amp;amp;Signature=qb7lyRYatPvJBcTWGcS94Tm~XofcYWkefp7NIBDCYnLiJneAgGg2HeXWX5P8tQNg4sex3ENXRUD4rSU1b82uz2FGQ7qzguQDsDrNr2o6XaPWUx~dZLCHOc12usTXoMQGCdFLqt-Auya1kePpdOAIXHOYyET3RiksuI58DzGjRgHldEvC5aFtrAF8df~TyVxoGGpKZv1Ybi2bjfDafrSC33xtrxjkq8RE1dAnFZ5hbkJmfIDP9HP9rxowL7DMSwHiTIWWEvbS-edxhB40b3G1KMavXnQvdoxZWyo~ROnIO3HuZz~1dBLcHKfmVGlY9vErkpX1pkfN0GyEH71wldFdSw__&amp;amp;Key-Pair-Id=K3580I9TTO3F0A&quot;&gt;Access to this site is blocked&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;overflow-wrap: break-word; margin: 6px 0px 10px; max-width: none; color: rgb(66, 66, 66); font-family: &amp;quot;Segoe Sans&amp;quot;, &amp;quot;Segoe UI&amp;quot;, &amp;quot;Segoe UI Web (West European)&amp;quot;, -apple-system, BlinkMacSystemFont, Roboto, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 16px; text-align: start; background-color: rgb(250, 250, 250);&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;overflow-wrap: break-word; margin: 6px 0px 10px; max-width: none; color: rgb(66, 66, 66); font-family: &amp;quot;Segoe Sans&amp;quot;, &amp;quot;Segoe UI&amp;quot;, &amp;quot;Segoe UI Web (West European)&amp;quot;, -apple-system, BlinkMacSystemFont, Roboto, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 16px; text-align: start; background-color: rgb(250, 250, 250);&quot;&gt;&lt;a href=&quot;https://cdn1-private.infotech.com/private_asset_archives/uploads/21969/Map-Your-Business-Architecture-to-Define-Your-Strategy.zip?Expires=1746636942&amp;amp;Signature=qb7lyRYatPvJBcTWGcS94Tm~XofcYWkefp7NIBDCYnLiJneAgGg2HeXWX5P8tQNg4sex3ENXRUD4rSU1b82uz2FGQ7qzguQDsDrNr2o6XaPWUx~dZLCHOc12usTXoMQGCdFLqt-Auya1kePpdOAIXHOYyET3RiksuI58DzGjRgHldEvC5aFtrAF8df~TyVxoGGpKZv1Ybi2bjfDafrSC33xtrxjkq8RE1dAnFZ5hbkJmfIDP9HP9rxowL7DMSwHiTIWWEvbS-edxhB40b3G1KMavXnQvdoxZWyo~ROnIO3HuZz~1dBLcHKfmVGlY9vErkpX1pkfN0GyEH71wldFdSw__&amp;amp;Key-Pair-Id=K3580I9TTO3F0A&quot;&gt;https://cdn1-private.infotech.com/private_asset_archives/uploads/21969/Map-Your-Business-Architecture-to-Define-Your-Strategy.zip?Expires=1746636942&amp;amp;Signature=qb7lyRYatPvJBcTWGcS94Tm~XofcYWkefp7NIBDCYnLiJneAgGg2HeXWX5P8tQNg4sex3ENXRUD4rSU1b82uz2FGQ7qzguQDsDrNr2o6XaPWUx~dZLCHOc12usTXoMQGCdFLqt-Auya1kePpdOAIXHOYyET3RiksuI58DzGjRgHldEvC5aFtrAF8df~TyVxoGGpKZv1Ybi2bjfDafrSC33xtrxjkq8RE1dAnFZ5hbkJmfIDP9HP9rxowL7DMSwHiTIWWEvbS-edxhB40b3G1KMavXnQvdoxZWyo~ROnIO3HuZz~1dBLcHKfmVGlY9vErkpX1pkfN0GyEH71wldFdSw__&amp;amp;Key-Pair-Id=K3580I9TTO3F0A&lt;/a&gt;&lt;/p&gt;" style="ellipse;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="-250" y="-1200" width="540" height="80" as="geometry" />
        </mxCell>
        <UserObject label="// /netlify/functions/openai.js&#xa;const fetch = require(&quot;node-fetch&quot;);&#xa;&#xa;&#xa;exports.handler = async (event, context) =&gt; {&#xa;  try {&#xa;    if (event.httpMethod !== &quot;POST&quot;) {&#xa;      return {&#xa;        statusCode: 405,&#xa;        body: JSON.stringify({ error: &quot;Method Not Allowed&quot; })&#xa;      };&#xa;    }&#xa;&#xa;&#xa;    const { userQuery, schema, envKey } = JSON.parse(event.body || &quot;{}&quot;);&#xa;&#xa;&#xa;    // Validate the client-supplied key.&#xa;    const ALLOWED_ENV_KEY = &quot;SECRET_ENV_KEY&quot;; // Hard-coded for this example&#xa;    if (envKey !== ALLOWED_ENV_KEY) {&#xa;      return {&#xa;        statusCode: 401,&#xa;        body: JSON.stringify({ error: &quot;Unauthorized&quot; })&#xa;      };&#xa;    }&#xa;&#xa;&#xa;    // Build the schema text from the structured object sent by the client.&#xa;    let schemaText = &quot;&quot;;&#xa;    if (Array.isArray(schema) &amp;&amp; schema.length) {&#xa;      schema.forEach(item =&gt; {&#xa;        if (item.table &amp;&amp; Array.isArray(item.columns)) {&#xa;          schemaText += &quot;Table &quot; + item.table + &quot;: Columns: &quot; + item.columns.join(&quot;, &quot;) + &quot;\n&quot;;&#xa;        }&#xa;      });&#xa;    } else {&#xa;      schemaText = &quot;No tables available.&quot;;&#xa;    }&#xa;&#xa;&#xa;    // Build the final prompt on the server.&#xa;    const prompt = &quot;Using SQLite syntax, based on the following schema:\n&quot; +&#xa;      schemaText +&#xa;      &quot;\nGenerate the SQL query for the following natural language description:\n\&quot;&quot; +&#xa;      userQuery +&#xa;      &quot;\&quot;\nReturn only the SQL query.&quot;;&#xa;&#xa;&#xa;    // Retrieve the OpenAI API key from your environment settings.&#xa;    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;&#xa;    if (!OPENAI_API_KEY) {&#xa;      return {&#xa;        statusCode: 500,&#xa;        body: JSON.stringify({ error: &quot;Server configuration error&quot; })&#xa;      };&#xa;    }&#xa;&#xa;&#xa;    // Call the OpenAI API.&#xa;    const openaiResponse = await fetch(&quot;https://api.openai.com/v1/chat/completions&quot;, {&#xa;      method: &quot;POST&quot;,&#xa;      headers: {&#xa;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#xa;        &quot;Authorization&quot;: `Bearer ${OPENAI_API_KEY}`&#xa;      },&#xa;      body: JSON.stringify({&#xa;        model: &quot;gpt-3.5-turbo&quot;,&#xa;        messages: [&#xa;          { role: &quot;system&quot;, content: &quot;You are a helpful SQL assistant.&quot; },&#xa;          { role: &quot;user&quot;, content: prompt }&#xa;        ]&#xa;      })&#xa;    });&#xa;&#xa;&#xa;    const data = await openaiResponse.json();&#xa;&#xa;&#xa;    return {&#xa;      statusCode: 200,&#xa;      body: JSON.stringify(data)&#xa;    };&#xa;&#xa;&#xa;  } catch (error) {&#xa;    return {&#xa;      statusCode: 500,&#xa;      body: JSON.stringify({ error: error.message })&#xa;    };&#xa;  }&#xa;};" link="// /netlify/functions/openai.js&#xa;const fetch = require(&quot;node-fetch&quot;);&#xa;&#xa;&#xa;exports.handler = async (event, context) =&gt; {&#xa;  try {&#xa;    if (event.httpMethod !== &quot;POST&quot;) {&#xa;      return {&#xa;        statusCode: 405,&#xa;        body: JSON.stringify({ error: &quot;Method Not Allowed&quot; })&#xa;      };&#xa;    }&#xa;&#xa;&#xa;    const { userQuery, schema, envKey } = JSON.parse(event.body || &quot;{}&quot;);&#xa;&#xa;&#xa;    // Validate the client-supplied key.&#xa;    const ALLOWED_ENV_KEY = &quot;SECRET_ENV_KEY&quot;; // Hard-coded for this example&#xa;    if (envKey !== ALLOWED_ENV_KEY) {&#xa;      return {&#xa;        statusCode: 401,&#xa;        body: JSON.stringify({ error: &quot;Unauthorized&quot; })&#xa;      };&#xa;    }&#xa;&#xa;&#xa;    // Build the schema text from the structured object sent by the client.&#xa;    let schemaText = &quot;&quot;;&#xa;    if (Array.isArray(schema) &amp;&amp; schema.length) {&#xa;      schema.forEach(item =&gt; {&#xa;        if (item.table &amp;&amp; Array.isArray(item.columns)) {&#xa;          schemaText += &quot;Table &quot; + item.table + &quot;: Columns: &quot; + item.columns.join(&quot;, &quot;) + &quot;\n&quot;;&#xa;        }&#xa;      });&#xa;    } else {&#xa;      schemaText = &quot;No tables available.&quot;;&#xa;    }&#xa;&#xa;&#xa;    // Build the final prompt on the server.&#xa;    const prompt = &quot;Using SQLite syntax, based on the following schema:\n&quot; +&#xa;      schemaText +&#xa;      &quot;\nGenerate the SQL query for the following natural language description:\n\&quot;&quot; +&#xa;      userQuery +&#xa;      &quot;\&quot;\nReturn only the SQL query.&quot;;&#xa;&#xa;&#xa;    // Retrieve the OpenAI API key from your environment settings.&#xa;    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;&#xa;    if (!OPENAI_API_KEY) {&#xa;      return {&#xa;        statusCode: 500,&#xa;        body: JSON.stringify({ error: &quot;Server configuration error&quot; })&#xa;      };&#xa;    }&#xa;&#xa;&#xa;    // Call the OpenAI API.&#xa;    const openaiResponse = await fetch(&quot;https://api.openai.com/v1/chat/completions&quot;, {&#xa;      method: &quot;POST&quot;,&#xa;      headers: {&#xa;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#xa;        &quot;Authorization&quot;: `Bearer ${OPENAI_API_KEY}`&#xa;      },&#xa;      body: JSON.stringify({&#xa;        model: &quot;gpt-3.5-turbo&quot;,&#xa;        messages: [&#xa;          { role: &quot;system&quot;, content: &quot;You are a helpful SQL assistant.&quot; },&#xa;          { role: &quot;user&quot;, content: prompt }&#xa;        ]&#xa;      })&#xa;    });&#xa;&#xa;&#xa;    const data = await openaiResponse.json();&#xa;&#xa;&#xa;    return {&#xa;      statusCode: 200,&#xa;      body: JSON.stringify(data)&#xa;    };&#xa;&#xa;&#xa;  } catch (error) {&#xa;    return {&#xa;      statusCode: 500,&#xa;      body: JSON.stringify({ error: error.message })&#xa;    };&#xa;  }&#xa;};" id="mDrpf2TN0rHwM7id590o-3">
          <mxCell style="whiteSpace=wrap;html=1;aspect=fixed;align=left;" parent="1" vertex="1">
            <mxGeometry x="-1030" y="-1010" width="450" height="450" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="prdKm51BEi7v1M33W9Gl-1" value="&lt;div&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;lt;head&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;lt;title&amp;gt;Netlify Function Test&amp;lt;/title&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;lt;!-- Load jQuery --&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;lt;script src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;lt;style&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; .chat-bubble {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; margin: 10px;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; padding: 10px;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; border: 1px solid #ccc;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; border-radius: 5px;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; #chat-bubbles button {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; margin-top: 5px;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/style&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;lt;body&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;lt;h1&amp;gt;Test OpenAI Request via Netlify Function&amp;lt;/h1&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;lt;input type=&quot;text&quot; id=&quot;query-textbox&quot; placeholder=&quot;Enter natural language query&quot; style=&quot;width: 300px;&quot; /&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;lt;button id=&quot;direct-openai&quot;&amp;gt;Send to OpenAI&amp;lt;/button&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;lt;div id=&quot;chat-bubbles&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;lt;script&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; // For testing, simulate a database object.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; var db = {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; exec: function(query) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Simulate table lookup.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (query === &quot;SELECT name FROM sqlite_master WHERE type=&#39;table&#39;&quot;) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Return a sample table listing.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return [{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; values: [&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [&quot;sampleTable&quot;]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else if (query.indexOf(&quot;PRAGMA table_info(&quot;) === 0) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Simulate the table&#39;s column info.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return [{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; values: [&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // simulate [cid, name, type, notnull, dflt_value, pk]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [0, &quot;id&quot;, &quot;INTEGER&quot;, 0, null, 1],&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [1, &quot;name&quot;, &quot;TEXT&quot;, 0, null, 0],&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [2, &quot;value&quot;, &quot;TEXT&quot;, 0, null, 0]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Assume it&#39;s a SQL query execution and return sample results.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return [{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; columns: [&quot;id&quot;, &quot;name&quot;, &quot;value&quot;],&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; values: [&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [1, &quot;Alice&quot;, &quot;Value 1&quot;],&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [2, &quot;Bob&quot;, &quot;Value 2&quot;]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; // Utility function to display messages.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; function addChatBubble(sender, message) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var bubble = $(&quot;&amp;lt;div&amp;gt;&quot;)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .addClass(&quot;chat-bubble&quot;)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .html(&quot;&amp;lt;strong&amp;gt;&quot; + sender.toUpperCase() + &quot;:&amp;lt;/strong&amp;gt; &quot; + message);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $(&quot;#chat-bubbles&quot;).append(bubble);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; // Button click handler.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; $(&quot;#direct-openai&quot;).click(function () {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var userQuery = $(&quot;#query-textbox&quot;).val().trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (userQuery === &quot;&quot;) return;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Build a structured version of the schema.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var tables = db.exec(&quot;SELECT name FROM sqlite_master WHERE type=&#39;table&#39;&quot;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var schema = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (tables.length) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tables[0].values.forEach(function (row) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var tableName = row[0];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var tableInfo = db.exec(&quot;PRAGMA table_info(&quot; + tableName + &quot;)&quot;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (tableInfo.length) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Transform table info into a list of strings like &quot;col_name (col_type)&quot;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var cols = tableInfo[0].values.map(function (col) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return col[1] + &quot; (&quot; + col[2] + &quot;)&quot;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; schema.push({ table: tableName, columns: cols });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Hard-coded env key (for demonstration; this will also be validated on the server).&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var clientEnvKey = &quot;SECRET_ENV_KEY&quot;;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Call the Netlify function with the raw inputs.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $.ajax({&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; url: &quot;/.netlify/functions/openai&quot;,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; type: &quot;POST&quot;,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; contentType: &quot;application/json&quot;,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; data: JSON.stringify({ userQuery: userQuery, schema: schema, envKey: clientEnvKey }),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; success: function (response) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Process the response from OpenAI.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (response &amp;amp;&amp;amp; response.choices &amp;amp;&amp;amp; response.choices.length &amp;gt; 0) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var sqlQuery = response.choices[0].message.content.trim();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Remove markdown code fences if present.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sqlQuery = sqlQuery.replace(/^```(sql)?/i, &quot;&quot;).replace(/```$/, &quot;&quot;).trim();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; addChatBubble(&quot;ai&quot;, &quot;OpenAI returned query: &quot; + sqlQuery +&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;lt;button class=&#39;add-to-dashboard&#39; data-query=&#39;&quot; + sqlQuery + &quot;&#39; data-display=&#39;table&#39;&amp;gt;Add to Dashboard&amp;lt;/button&amp;gt;&quot;);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var res = db.exec(sqlQuery);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (res.length) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var html = &quot;&amp;lt;table border=&#39;1&#39; style=&#39;border-collapse: collapse; width:100%&#39;&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&quot;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; res[0].columns.forEach(function (col) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; html += &quot;&amp;lt;th&amp;gt;&quot; + col + &quot;&amp;lt;/th&amp;gt;&quot;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; html += &quot;&amp;lt;/tr&amp;gt;&amp;lt;/thead&amp;gt;&amp;lt;tbody&amp;gt;&quot;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; res[0].values.forEach(function (row) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; html += &quot;&amp;lt;tr&amp;gt;&quot;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; row.forEach(function (cell) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; html += &quot;&amp;lt;td&amp;gt;&quot; + cell + &quot;&amp;lt;/td&amp;gt;&quot;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; html += &quot;&amp;lt;/tr&amp;gt;&quot;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; html += &quot;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;&quot;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; addChatBubble(&quot;ai&quot;, html);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; addChatBubble(&quot;ai&quot;, &quot;Query executed but returned no results.&quot;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } catch (e) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; addChatBubble(&quot;ai&quot;, &quot;&amp;lt;span style=&#39;color:red&#39;&amp;gt;Error executing query: &quot; + e.message + &quot;&amp;lt;/span&amp;gt;&quot;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; error: function (xhr, status, error) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; addChatBubble(&quot;ai&quot;, &quot;&amp;lt;span style=&#39;color:red&#39;&amp;gt;Error calling Netlify function: &quot; + error + &quot;&amp;lt;/span&amp;gt;&quot;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="shape=parallelogram;perimeter=parallelogramPerimeter;whiteSpace=wrap;html=1;fixedSize=1;" vertex="1" parent="1">
          <mxGeometry y="-920" width="120" height="60" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
