<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36 Edg/139.0.0.0" version="28.2.5">
  <diagram name="Page-1" id="9P5zmbUqhx5oAUq7oSqs">
    <mxGraphModel dx="1628" dy="30206" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="GPv4OBVuaJ06lYvBayas-1" value="&lt;div&gt;[[[!doctype html]]]&lt;/div&gt;&lt;div&gt;[[[html lang=&quot;en&quot;]]]&lt;/div&gt;&lt;div&gt;[[[head]]]&lt;/div&gt;&lt;div&gt;[[[meta charset=&quot;utf-8&quot;]]]&lt;/div&gt;&lt;div&gt;[[[title]]]World‑Class Data Chat (Fixed)[[[/title]]]&lt;/div&gt;&lt;div&gt;[[[meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[[[!-- SheetJS --]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;[[[!-- sql.js --]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.8.0/sql-wasm.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;[[[!-- Chart.js core --]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;[[[!-- Chart.js plugins --]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdn.jsdelivr.net/npm/chartjs-chart-treemap@3.3.0/dist/chartjs-chart-treemap.min.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdn.jsdelivr.net/npm/chartjs-chart-matrix@2.0.1/dist/chartjs-chart-matrix.min.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;[[[!-- Cytoscape --]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdn.jsdelivr.net/npm/cytoscape@3.26.0/dist/cytoscape.min.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[[[style]]]&lt;/div&gt;&lt;div&gt;:root {&lt;/div&gt;&lt;div&gt;&amp;nbsp; --bg:#0c0f14; --panel:#121a27; --panel2:#0f1826; --border:#223046;&lt;/div&gt;&lt;div&gt;&amp;nbsp; --text:#e7eef8; --muted:#a2b2c9; --accent:#5aa9ff; --accent2:#7b5cff;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;* { box-sizing:border-box; }&lt;/div&gt;&lt;div&gt;body { margin:0; background:var(--bg); color:var(--text); font-family:Inter,system-ui,sans-serif; display:flex; height:100vh; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Sidebar */&lt;/div&gt;&lt;div&gt;.sidebar { width:340px; background:linear-gradient(180deg,var(--panel),var(--panel2)); border-right:1px solid var(--border); overflow:auto; transition:width .2s ease; }&lt;/div&gt;&lt;div&gt;.sidebar.collapsed { width:56px; }&lt;/div&gt;&lt;div&gt;.sidebar.collapsed .panel { display:none; }&lt;/div&gt;&lt;div&gt;.mini-icons { display:flex; gap:8px; padding:10px; justify-content:center; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Main */&lt;/div&gt;&lt;div&gt;.main { flex:1; display:flex; flex-direction:column; }&lt;/div&gt;&lt;div&gt;.topbar { padding:10px; border-bottom:1px solid var(--border); display:flex; justify-content:space-between; align-items:center; }&lt;/div&gt;&lt;div&gt;.topbar .brand { font-weight:800; }&lt;/div&gt;&lt;div&gt;.topbar .toggle { background:#0d1622; border:1px solid var(--border); color:#fff; padding:6px 10px; border-radius:8px; cursor:pointer; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Tabs */&lt;/div&gt;&lt;div&gt;.tabs { display:flex; gap:8px; padding:8px 16px; border-bottom:1px solid var(--border); }&lt;/div&gt;&lt;div&gt;.tabs button { background:#0d1622; border:1px solid var(--border); color:#fff; padding:6px 10px; border-radius:8px; cursor:pointer; }&lt;/div&gt;&lt;div&gt;.tabs button.active { background:linear-gradient(135deg,var(--accent),var(--accent2)); color:#000; font-weight:800; border:none; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Views */&lt;/div&gt;&lt;div&gt;.view { flex:1; display:none; overflow:auto; }&lt;/div&gt;&lt;div&gt;.view.active { display:flex; flex-direction:column; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Chat */&lt;/div&gt;&lt;div&gt;.messages { flex:1; overflow:auto; padding:16px; display:flex; flex-direction:column; gap:12px; }&lt;/div&gt;&lt;div&gt;.msg { max-width:80%; }&lt;/div&gt;&lt;div&gt;.msg.user { align-self:flex-end; }&lt;/div&gt;&lt;div&gt;.msg.assistant { align-self:flex-start; }&lt;/div&gt;&lt;div&gt;.bubble { padding:10px 14px; border-radius:14px; font-size:14px; line-height:1.45; background:#0d1622; border:1px solid var(--border); }&lt;/div&gt;&lt;div&gt;.bubble.user { background:#1e3354; border-color:#1f3556; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Activity */&lt;/div&gt;&lt;div&gt;.activity { padding:8px 16px; font-size:13px; color:var(--muted); display:none; }&lt;/div&gt;&lt;div&gt;.activity .step { display:inline-block; margin-right:12px; }&lt;/div&gt;&lt;div&gt;.activity .dots span { display:inline-block; animation:blink 1.4s infinite both; }&lt;/div&gt;&lt;div&gt;.activity .dots span:nth-child(2){ animation-delay:.2s; } .activity .dots span:nth-child(3){ animation-delay:.4s; }&lt;/div&gt;&lt;div&gt;@keyframes blink{0%{opacity:.2;}20%{opacity:1;}100%{opacity:.2;}}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Composer + Suggestions */&lt;/div&gt;&lt;div&gt;.composer-wrap { position:sticky; bottom:0; background:var(--bg); border-top:1px solid var(--border); }&lt;/div&gt;&lt;div&gt;.composer { display:flex; gap:8px; padding:10px 16px; flex-wrap:wrap; }&lt;/div&gt;&lt;div&gt;.composer textarea { flex:1; resize:none; border:none; outline:none; background:transparent; color:#fff; font-size:15px; padding:8px; }&lt;/div&gt;&lt;div&gt;.composer .send { width:40px; height:40px; border:none; border-radius:50%; background:linear-gradient(135deg,var(--accent),var(--accent2)); color:#000; font-weight:800; cursor:pointer; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;.suggest-overlay { position:sticky; bottom:64px; display:none; padding:8px; }&lt;/div&gt;&lt;div&gt;.suggest-panel { margin-left:auto; max-width:40%; background:#0d1622; border:1px solid var(--border); border-radius:12px; box-shadow:0 8px 24px rgba(0,0,0,0.4); }&lt;/div&gt;&lt;div&gt;.suggest-grid { display:flex; flex-wrap:wrap; gap:6px; padding:8px; }&lt;/div&gt;&lt;div&gt;.suggest-chip { background:#121a27; border:1px solid var(--border); color:#fff; border-radius:12px; padding:6px 10px; cursor:pointer; font-size:12px; }&lt;/div&gt;&lt;div&gt;.suggest-chip.prime { background:linear-gradient(135deg,var(--accent),var(--accent2)); color:#000; border:none; font-weight:700; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Tiles (inside chat bubbles) */&lt;/div&gt;&lt;div&gt;.inline-tiles { display:flex; gap:12px; flex-wrap:wrap; }&lt;/div&gt;&lt;div&gt;.tile { width:360px; background:#0d1622; border:1px solid var(--border); border-radius:12px; padding:10px; display:flex; flex-direction:column; gap:8px; }&lt;/div&gt;&lt;div&gt;.tile-header { display:flex; justify-content:space-between; align-items:center; }&lt;/div&gt;&lt;div&gt;.tile-title { font-weight:700; font-size:14px; }&lt;/div&gt;&lt;div&gt;.tile-actions { display:flex; gap:6px; align-items:center; }&lt;/div&gt;&lt;div&gt;.icon-btn { background:#121a27; border:1px solid var(--border); color:#fff; padding:6px; border-radius:8px; font-size:12px; cursor:pointer; display:flex; align-items:center; justify-content:center; }&lt;/div&gt;&lt;div&gt;.more { position:relative; }&lt;/div&gt;&lt;div&gt;.more-menu { position:absolute; right:0; top:28px; background:#0d1622; border:1px solid var(--border); border-radius:8px; padding:6px; display:none; z-index:10; }&lt;/div&gt;&lt;div&gt;.more-menu button, .more-menu select { display:block; width:180px; text-align:left; margin:4px 0; background:#121a27; color:#fff; border:1px solid var(--border); border-radius:8px; padding:6px; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;.tile-media { width:100%; height:240px; border:1px solid var(--border); border-radius:8px; overflow:hidden; display:flex; align-items:center; justify-content:center; background:#0b0f14; }&lt;/div&gt;&lt;div&gt;.tile-desc { font-size:12px; color:#a2b2c9; }&lt;/div&gt;&lt;div&gt;.explain { font-size:12px; color:#a2b2c9; border-top:1px dashed var(--border); padding-top:6px; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Table */&lt;/div&gt;&lt;div&gt;.results { width:100%; height:100%; overflow:auto; }&lt;/div&gt;&lt;div&gt;table { width:100%; border-collapse:collapse; font-size:13px; }&lt;/div&gt;&lt;div&gt;th, td { border-bottom:1px solid var(--border); padding:6px 8px; text-align:left; }&lt;/div&gt;&lt;div&gt;th { background:#0d1622; position:sticky; top:0; cursor:pointer; color:#fff; }&lt;/div&gt;&lt;div&gt;th .sort { opacity:.6; font-size:11px; margin-left:6px; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Modal */&lt;/div&gt;&lt;div&gt;.modal { position:fixed; inset:0; display:none; align-items:center; justify-content:center; background:rgba(0,0,0,0.6); z-index:9999; }&lt;/div&gt;&lt;div&gt;.modal-content { background:#0d1622; border:1px solid var(--border); border-radius:12px; max-width:92vw; max-height:88vh; width:92vw; height:88vh; display:flex; flex-direction:column; }&lt;/div&gt;&lt;div&gt;.modal-header { padding:8px; display:flex; justify-content:space-between; align-items:center; border-bottom:1px solid var(--border); }&lt;/div&gt;&lt;div&gt;.modal-body { flex:1; overflow:auto; padding:8px; }&lt;/div&gt;&lt;div&gt;.close-btn { background:#1f2b3f; border:1px solid var(--border); color:#fff; padding:6px 10px; border-radius:8px; cursor:pointer; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Sidebar panels */&lt;/div&gt;&lt;div&gt;.panel { padding:12px; border-bottom:1px solid var(--border); }&lt;/div&gt;&lt;div&gt;.panel h3 { margin:6px 0 10px; font-size:16px; }&lt;/div&gt;&lt;div&gt;.input, textarea, button, select, label.checkbox {&lt;/div&gt;&lt;div&gt;&amp;nbsp; width:100%; background:#0d1622; border:1px solid var(--border); color:#fff;&lt;/div&gt;&lt;div&gt;&amp;nbsp; padding:8px; border-radius:8px; margin:4px 0; font-size:14px;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;button.primary { background:linear-gradient(135deg,var(--accent),var(--accent2)); color:#000; font-weight:800; border:none; }&lt;/div&gt;&lt;div&gt;.status { font-size:12px; color:#a2b2c9; white-space:pre-line; }&lt;/div&gt;&lt;div&gt;.checkbox { display:flex; align-items:center; gap:8px; }&lt;/div&gt;&lt;div&gt;.ref-badge { display:inline-block; margin-left:6px; padding:2px 6px; border-radius:8px; border:1px solid var(--border); background:#0d1622; color:#a2b2c9; font-size:11px; cursor:help; }&lt;/div&gt;&lt;div&gt;[[[/style]]]&lt;/div&gt;&lt;div&gt;[[[/head]]]&lt;/div&gt;&lt;div&gt;[[[body]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[[[!-- Sidebar --]]]&lt;/div&gt;&lt;div&gt;[[[div class=&quot;sidebar&quot; id=&quot;sidebar&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;mini-icons&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button id=&quot;miniToggle&quot; title=&quot;Toggle sidebar&quot;]]]☰[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[h3]]]Controls[[[/h3]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[input id=&quot;openaiKey&quot; class=&quot;input&quot; type=&quot;password&quot; placeholder=&quot;OpenAI API Key (sk-...)&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[select id=&quot;modelSelect&quot; class=&quot;input&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;gpt-4o-mini&quot; selected]]]gpt-4o-mini[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;gpt-4o&quot;]]]gpt-4o[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;gpt-4.1-mini&quot;]]]gpt-4.1-mini[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/select]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[select id=&quot;responseMode&quot; class=&quot;input&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;both&quot; selected]]]Summary + Tiles[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;summary&quot;]]]Summary only[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;tiles&quot;]]]Tiles only[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;table&quot;]]]Table only[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/select]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[label class=&quot;checkbox&quot;]]][[[input type=&quot;checkbox&quot; id=&quot;allowWrites&quot;]]] Allow writes (UPDATE/DELETE/DDL) with confirmation[[[/label]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[h3]]]Load Excel[[[/h3]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;status&quot;]]]Include a metadata sheet with two columns: attribute and description/categories.[[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[input type=&quot;file&quot; id=&quot;excelInput&quot; accept=&quot;.xlsx,.xls&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button class=&quot;primary&quot; id=&quot;loadExcelBtn&quot;]]]Load Excel[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button id=&quot;resetDbBtn&quot;]]]Reset DB[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div id=&quot;loadStatus&quot; class=&quot;status&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[h3]]]Metadata enrichment[[[/h3]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;status&quot;]]]Descriptions (JSON): {&quot;applications&quot;:&quot;id, name, status, category, owner, created_at&quot;}[[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[textarea id=&quot;metaDescriptions&quot; rows=&quot;6&quot;]]][[[/textarea]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;status&quot;]]]Relationships (JSON): {&quot;applications.application_id&quot;:[&quot;connections.application_id&quot;,&quot;transactions.application_id&quot;]}[[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[textarea id=&quot;metaRelationships&quot; rows=&quot;6&quot;]]][[[/textarea]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[h3]]]Manual SQL[[[/h3]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[textarea id=&quot;manualSql&quot; rows=&quot;4&quot; placeholder=&quot;Paste SQL (multi-statements; ```sql fences accepted)&quot;]]][[[/textarea]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button class=&quot;primary&quot; id=&quot;runSqlBtn&quot;]]]Execute[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div id=&quot;sqlStatus&quot; class=&quot;status&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[h3]]]Schema[[[/h3]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div id=&quot;schemaPanel&quot; class=&quot;status&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[h3]]]System log[[[/h3]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div id=&quot;systemLog&quot; class=&quot;status&quot; style=&quot;max-height:200px; overflow:auto;&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;[[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[[[!-- Main --]]]&lt;/div&gt;&lt;div&gt;[[[div class=&quot;main&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;topbar&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;brand&quot;]]]Data Chat[[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button class=&quot;toggle&quot; id=&quot;toggleSidebar&quot;]]]☰[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;tabs&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button id=&quot;tabChat&quot; class=&quot;active&quot;]]]Chat[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button id=&quot;tabDashboards&quot;]]]Dashboards[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button id=&quot;tabFavorites&quot;]]]Favorites[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button id=&quot;tabDQ&quot;]]]Data quality[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[!-- Chat view --]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div id=&quot;viewChat&quot; class=&quot;view active&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;messages&quot; id=&quot;messages&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div id=&quot;activity&quot; class=&quot;activity&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[span class=&quot;step&quot; id=&quot;stepPlan&quot;]]]Planning[[[/span]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[span class=&quot;step&quot; id=&quot;stepExec&quot;]]]Executing[[[/span]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[span class=&quot;step&quot; id=&quot;stepSumm&quot;]]]Summarizing[[[/span]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[span class=&quot;dots&quot;]]][[[span]]].[[[/span]]][[[span]]].[[[/span]]][[[span]]].[[[/span]]][[[/span]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[!-- Suggestions overlay --]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;suggest-overlay&quot; id=&quot;suggestOverlay&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[div class=&quot;suggest-panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [[[div class=&quot;suggest-grid&quot; id=&quot;suggestGrid&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[!-- Composer --]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;composer-wrap&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[div class=&quot;composer&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [[[textarea id=&quot;nlInput&quot; rows=&quot;1&quot; placeholder=&#39;Ask your data... e.g., &quot;Create dashboard for applications&quot;&#39;]]][[[/textarea]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [[[button id=&quot;askBtn&quot; class=&quot;send&quot; title=&quot;Send&quot;]]]✈️[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[!-- Dashboards --]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div id=&quot;viewDashboards&quot; class=&quot;view&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;messages&quot; id=&quot;dashMessages&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[!-- Favorites --]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div id=&quot;viewFavorites&quot; class=&quot;view&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;messages&quot; id=&quot;favMessages&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[!-- Data Quality --]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div id=&quot;viewDQ&quot; class=&quot;view&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;panel&quot; style=&quot;border:none;&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[select id=&quot;dqTableSelect&quot; class=&quot;input&quot;]]][[[/select]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[button id=&quot;runDQBtn&quot; class=&quot;primary&quot;]]]Run data quality checks[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;messages&quot; id=&quot;dqMessages&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;[[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[[[!-- Modal --]]]&lt;/div&gt;&lt;div&gt;[[[div id=&quot;modal&quot; class=&quot;modal&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;modal-content&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;modal-header&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[div id=&quot;modalTitle&quot;]]]Fullscreen[[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[button class=&quot;close-btn&quot; id=&quot;closeModalBtn&quot;]]]Close[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;modal-body&quot; id=&quot;modalBody&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;[[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[[[script]]]&lt;/div&gt;&lt;div&gt;/* Chart plugins */&lt;/div&gt;&lt;div&gt;Chart.register(ChartDataLabels);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Globals */&lt;/div&gt;&lt;div&gt;let SQLModule, db;&lt;/div&gt;&lt;div&gt;let schemaCatalog = {};&lt;/div&gt;&lt;div&gt;let excelMetaMap = {};&lt;/div&gt;&lt;div&gt;let datasetKey = &#39;&#39;;&lt;/div&gt;&lt;div&gt;let dashboards = [];&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Helpers */&lt;/div&gt;&lt;div&gt;function log(msg){ const t=new Date().toLocaleString(); const el=document.getElementById(&#39;systemLog&#39;); el.textContent += `[${t}] ${msg}\n`; el.scrollTop=el.scrollHeight; }&lt;/div&gt;&lt;div&gt;function appendMessage(role, html){ const wrap=document.createElement(&#39;div&#39;); wrap.className=`msg ${role}`; const bubble=document.createElement(&#39;div&#39;); bubble.className=`bubble ${role}`; bubble.innerHTML=html; wrap.appendChild(bubble); const m=getActiveMessages(); m.appendChild(wrap); m.scrollTop=m.scrollHeight; return bubble; }&lt;/div&gt;&lt;div&gt;function getActiveMessages(){ const views={ viewChat:&#39;messages&#39;, viewDashboards:&#39;dashMessages&#39;, viewFavorites:&#39;favMessages&#39;, viewDQ:&#39;dqMessages&#39; }; const active=document.querySelector(&#39;.view.active&#39;).id; return document.getElementById(views[active]); }&lt;/div&gt;&lt;div&gt;function escapeHtml(s){ return String(s).replace(/[&amp;amp;[[[]]]&quot;&#39;]/g, m=]]]({&#39;&amp;amp;&#39;:&#39;&amp;amp;amp;&#39;,&#39;[[[&#39;:&#39;&amp;amp;lt;&#39;,&#39;]]]&#39;:&#39;&amp;amp;gt;&#39;,&#39;&quot;&#39;:&#39;&amp;amp;quot;&#39;,&quot;&#39;&quot;:&#39;&amp;amp;#39;&#39;}[m])); }&lt;/div&gt;&lt;div&gt;function stripFence(s){ if(!s) return &#39;&#39;; const m=s.trim().match(/^```(?:sql|html)?\s*([\s\S]*?)```$/i); return m?m[1].trim():s.trim(); }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Sidebar toggle */&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;toggleSidebar&#39;).onclick = ()=]]] document.getElementById(&#39;sidebar&#39;).classList.toggle(&#39;collapsed&#39;);&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;miniToggle&#39;).onclick = ()=]]] document.getElementById(&#39;sidebar&#39;).classList.toggle(&#39;collapsed&#39;);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Tabs */&lt;/div&gt;&lt;div&gt;function setActiveView(id){&lt;/div&gt;&lt;div&gt;&amp;nbsp; [&#39;viewChat&#39;,&#39;viewDashboards&#39;,&#39;viewFavorites&#39;,&#39;viewDQ&#39;].forEach(v=]]]document.getElementById(v).classList.remove(&#39;active&#39;));&lt;/div&gt;&lt;div&gt;&amp;nbsp; document.getElementById(id).classList.add(&#39;active&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; [&#39;tabChat&#39;,&#39;tabDashboards&#39;,&#39;tabFavorites&#39;,&#39;tabDQ&#39;].forEach(t=]]]document.getElementById(t).classList.remove(&#39;active&#39;));&lt;/div&gt;&lt;div&gt;&amp;nbsp; ({ viewChat:&#39;tabChat&#39;, viewDashboards:&#39;tabDashboards&#39;, viewFavorites:&#39;tabFavorites&#39;, viewDQ:&#39;tabDQ&#39; })[id] &amp;amp;&amp;amp; document.getElementById(({ viewChat:&#39;tabChat&#39;, viewDashboards:&#39;tabDashboards&#39;, viewFavorites:&#39;tabFavorites&#39;, viewDQ:&#39;tabDQ&#39; })[id]).classList.add(&#39;active&#39;);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;tabChat&#39;).onclick=()=]]]setActiveView(&#39;viewChat&#39;);&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;tabDashboards&#39;).onclick=()=]]]{ renderDashboardsChat(); setActiveView(&#39;viewDashboards&#39;); };&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;tabFavorites&#39;).onclick=()=]]]{ loadFavoritesChat(); setActiveView(&#39;viewFavorites&#39;); };&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;tabDQ&#39;).onclick=()=]]]{ populateDQTableSelect(); setActiveView(&#39;viewDQ&#39;); };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Activity */&lt;/div&gt;&lt;div&gt;function setActivity(show=true, phase=&#39;plan&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const el=document.getElementById(&#39;activity&#39;); el.style.display = show ? &#39;block&#39; : &#39;none&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const plan=document.getElementById(&#39;stepPlan&#39;), exec=document.getElementById(&#39;stepExec&#39;), summ=document.getElementById(&#39;stepSumm&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; plan.style.color=&#39;#a2b2c9&#39;; exec.style.color=&#39;#a2b2c9&#39;; summ.style.color=&#39;#a2b2c9&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(phase===&#39;plan&#39;) plan.style.color=&#39;#e7eef8&#39;; if(phase===&#39;exec&#39;) exec.style.color=&#39;#e7eef8&#39;; if(phase===&#39;summ&#39;) summ.style.color=&#39;#e7eef8&#39;;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* SQLite init */&lt;/div&gt;&lt;div&gt;async function initSQLite(){ SQLModule = await initSqlJs({ locateFile:f=]]]`https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.8.0/${f}` }); db = new SQLModule.Database(); log(&#39;SQLite initialized.&#39;); }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Sanitizer */&lt;/div&gt;&lt;div&gt;function sanitizeName(n){ return String(n).trim().replace(/\s+/g,&#39;_&#39;).replace(/[^\w]/g,&#39;&#39;).replace(/^(\d)/,&#39;_$1&#39;).toLowerCase(); }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Excel parsing */&lt;/div&gt;&lt;div&gt;function parseSheet(ws, name){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const arr = XLSX.utils.sheet_to_json(ws, { header: 1, raw: true, blankrows: false });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (!arr || !arr.length) return { rows: [], metaAdded: false };&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (arr[0].length === 2 &amp;amp;&amp;amp; arr[0][0] != null &amp;amp;&amp;amp; arr[0][1] != null) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for (const r of arr) { if (r[0] != null &amp;amp;&amp;amp; r[1] != null) excelMetaMap[String(r[0]).trim()] = String(r[1]).trim(); }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; log(`Metadata sheet &quot;${name}&quot; ingested (${arr.length} rows).`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return { rows: [], metaAdded: true };&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; const firstRow = arr[0] || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; const a1 = firstRow[0] == null ? &#39;&#39; : String(firstRow[0]).trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; const special = /^component$/i.test(a1) || /^connection$/i.test(a1);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; let headers = [], dataRows = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (special) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const trimmed = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for (let r = 1; r [[[ arr.length; r++) trimmed.push((arr[r] || []).slice(1));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!trimmed.length) return { rows: [], metaAdded: false };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; headers = trimmed[0].map(h =]]] sanitizeName(h ?? &#39;col&#39;));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for (let r = 1; r [[[ trimmed.length; r++) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const row = trimmed[r] || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const obj = {};&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; headers.forEach((h,i)=]]]obj[h] = row[i] ?? null);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (Object.values(obj).some(v =]]] v != null &amp;amp;&amp;amp; String(v).trim() !== &#39;&#39;)) dataRows.push(obj);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; headers = firstRow.map(h =]]] sanitizeName(h ?? &#39;col&#39;));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for (let r = 1; r [[[ arr.length; r++) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const row = arr[r] || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const obj = {};&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; headers.forEach((h,i)=]]]obj[h] = row[i] ?? null);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (Object.values(obj).some(v =]]] v != null &amp;amp;&amp;amp; String(v).trim() !== &#39;&#39;)) dataRows.push(obj);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { rows: dataRows, metaAdded: false };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;function buildDDL(name, rows){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const table = sanitizeName(name);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const colSet = new Set();&lt;/div&gt;&lt;div&gt;&amp;nbsp; rows.forEach(r =]]] Object.keys(r).forEach(k =]]] colSet.add(sanitizeName(k))));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const columns = Array.from(colSet).map(c =]]] ({ name:c, type:&#39;TEXT&#39; }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const ddl = `CREATE TABLE &quot;${table}&quot; (${columns.map(c=]]]`&quot;${c.name}&quot; ${c.type}`).join(&#39;, &#39;)});`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { ddl, columns, table };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;function insertRows(table, rows, columns){&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (!rows.length) return;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const cols = columns.map(c=]]]`&quot;${c.name}&quot;`).join(&#39;, &#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const placeholders = columns.map(()=]]]&#39;?&#39;).join(&#39;, &#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const stmt = db.prepare(`INSERT INTO &quot;${table}&quot; (${cols}) VALUES (${placeholders});`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; db.run(&#39;BEGIN;&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; rows.forEach(r =]]] stmt.run(columns.map(c =]]] {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const v = r[c.name];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return (v !== null &amp;amp;&amp;amp; typeof v === &#39;object&#39;) ? JSON.stringify(v) : (v ?? null);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; })));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; db.run(&#39;COMMIT;&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; } catch (e) { db.run(&#39;ROLLBACK;&#39;); throw e; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; finally { stmt.free(); }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Schema render + datasetKey */&lt;/div&gt;&lt;div&gt;function renderSchema(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const panel = document.getElementById(&#39;schemaPanel&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const names = Object.keys(schemaCatalog);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (!names.length) { panel.textContent = &#39;No tables loaded.&#39;; datasetKey=&#39;&#39;; return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; const lines = names.map(t =]]] `${t}: ${schemaCatalog[t].columns.map(c=]]]c.name).join(&#39;, &#39;)}`).join(&#39;\n&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; panel.textContent = lines;&lt;/div&gt;&lt;div&gt;&amp;nbsp; datasetKey = btoa(lines).slice(0,128);&lt;/div&gt;&lt;div&gt;&amp;nbsp; generateSuggestions();&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Suggestions */&lt;/div&gt;&lt;div&gt;function generateSuggestions(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const names = Object.keys(schemaCatalog);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const relText=document.getElementById(&#39;metaRelationships&#39;).value.trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; let rel={}; try{ if(relText) rel = JSON.parse(relText); }catch{}&lt;/div&gt;&lt;div&gt;&amp;nbsp; const prime=[]; const secondary=[];&lt;/div&gt;&lt;div&gt;&amp;nbsp; names.forEach(t=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const cols = schemaCatalog[t].columns.map(c=]]]c.name);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const hasDate = cols.some(c=]]]/date|created|updated|time/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const hasOwner = cols.some(c=]]]/owner|user|assignee|account/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const hasStatus = cols.some(c=]]]/status|state|phase/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const hasCategory = cols.some(c=]]]/category|type|segment|region/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (hasStatus) prime.push(`Status breakdown in ${t}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (hasCategory) prime.push(`Category distribution in ${t}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (hasDate) prime.push(`Monthly trend in ${t}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (hasOwner) prime.push(`Top owners in ${t}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; Object.keys(rel).forEach(k=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const [rt, rc]=k.split(&#39;.&#39;); if(rt===t){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; rel[k].forEach(target=]]]{ const [tt, tc]=target.split(&#39;.&#39;); prime.push(`Join ${t} ↔ ${tt} by ${rc}=${tc}`); });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; secondary.push(`Top 10 records in ${t}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; cols.forEach(c=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (/name|status|category|type|owner|segment|region/i.test(c)) secondary.push(`Count ${c} group by ${c} in ${t}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; const top = Array.from(new Set(prime)).slice(0,6);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tail = Array.from(new Set(secondary.filter(x=]]]!top.includes(x)))).slice(0,3);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const suggestions = [...top, ...tail];&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const overlay=document.getElementById(&#39;suggestOverlay&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const grid=document.getElementById(&#39;suggestGrid&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; grid.innerHTML=&#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; suggestions.forEach((s,i)=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const b=document.createElement(&#39;button&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; b.className=&#39;suggest-chip&#39;+(i[[[6?&#39; prime&#39;:&#39;&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; b.textContent=s;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; b.onclick=()=]]]{ overlay.style.display=&#39;none&#39;; document.getElementById(&#39;nlInput&#39;).value=s; document.getElementById(&#39;askBtn&#39;).click(); };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; grid.appendChild(b);&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Show suggestions while typing */&lt;/div&gt;&lt;div&gt;const nlInput=document.getElementById(&#39;nlInput&#39;);&lt;/div&gt;&lt;div&gt;nlInput.addEventListener(&#39;focus&#39;, ()=]]]{ document.getElementById(&#39;suggestOverlay&#39;).style.display=&#39;block&#39;; });&lt;/div&gt;&lt;div&gt;nlInput.addEventListener(&#39;input&#39;, ()=]]]{ document.getElementById(&#39;suggestOverlay&#39;).style.display=&#39;block&#39;; });&lt;/div&gt;&lt;div&gt;nlInput.addEventListener(&#39;blur&#39;, ()=]]]{ setTimeout(()=]]]document.getElementById(&#39;suggestOverlay&#39;).style.display=&#39;none&#39;, 200); });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* OpenAI chat */&lt;/div&gt;&lt;div&gt;async function openaiChat(messages){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const key=document.getElementById(&#39;openaiKey&#39;).value.trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; const model=document.getElementById(&#39;modelSelect&#39;).value;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (!key) throw new Error(&#39;OpenAI API key required.&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const res=await fetch(&#39;https://api.openai.com/v1/chat/completions&#39;,{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; method:&#39;POST&#39;,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; headers:{&#39;Content-Type&#39;:&#39;application/json&#39;,&#39;Authorization&#39;:`Bearer ${key}`},&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; body:JSON.stringify({model,messages,temperature:0})&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!res.ok){ throw new Error(await res.text()); }&lt;/div&gt;&lt;div&gt;&amp;nbsp; const j=await res.json();&lt;/div&gt;&lt;div&gt;&amp;nbsp; const content=j.choices?.[0]?.message?.content;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!content) throw new Error(&#39;Empty model response.&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; return content;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Guardrails */&lt;/div&gt;&lt;div&gt;function detectPII(text){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const findings = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b/i.test(text)) findings.push(&#39;Email&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{3}\)?[-.\s]?)\d{3}[-.\s]?\d{4}\b/.test(text)) findings.push(&#39;Phone&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\b(?:\d[ -]*?){13,16}\b/.test(text)) findings.push(&#39;Credit card-like&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\b\d{3}-\d{2}-\d{4}\b/.test(text)) findings.push(&#39;SSN-like&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; return findings;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;function detectPromptInjection(text){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const cues = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\bignore\s+previous\b/i.test(text)) cues.push(&#39;Prompt injection: ignore previous&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\boverride\b/i.test(text)) cues.push(&#39;Prompt injection: override&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\bforget\s+instructions\b/i.test(text)) cues.push(&#39;Prompt injection: forget instructions&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; return cues;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Schema text */&lt;/div&gt;&lt;div&gt;function buildSchemaText(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const lines = Object.keys(schemaCatalog).map(t=]]]`- ${t} (columns: ${schemaCatalog[t].columns.map(c=]]]c.name).join(&#39;, &#39;)})`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const excelMetaStr = JSON.stringify(excelMetaMap, null, 2);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const descText=document.getElementById(&#39;metaDescriptions&#39;).value.trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; const relText=document.getElementById(&#39;metaRelationships&#39;).value.trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; let desc=&#39;{}&#39;, rel=&#39;{}&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; try{ if(descText) desc = JSON.stringify(JSON.parse(descText), null, 2); }catch{}&lt;/div&gt;&lt;div&gt;&amp;nbsp; try{ if(relText) rel = JSON.stringify(JSON.parse(relText), null, 2); }catch{}&lt;/div&gt;&lt;div&gt;&amp;nbsp; return `Schema:&lt;/div&gt;&lt;div&gt;${lines.join(&#39;\n&#39;)}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Descriptions (manual JSON):&lt;/div&gt;&lt;div&gt;${desc}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Descriptions (Excel two-column sheet):&lt;/div&gt;&lt;div&gt;${excelMetaStr}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Relationships (manual JSON: &quot;table.column&quot; → [&quot;table.column&quot;, ...]):&lt;/div&gt;&lt;div&gt;${rel}`;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Prompts */&lt;/div&gt;&lt;div&gt;function buildPlanningPrompt(query){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const schemaMeta = buildSchemaText();&lt;/div&gt;&lt;div&gt;&amp;nbsp; const sys = `You are a reliable SQLite agent and planner.&lt;/div&gt;&lt;div&gt;- Understand intent from natural language.&lt;/div&gt;&lt;div&gt;- Produce one fenced SQL block (DDL, DML, SELECT).&lt;/div&gt;&lt;div&gt;- Use exact table/column names (lower_snake).&lt;/div&gt;&lt;div&gt;- Use relationship hints to join related tables.&lt;/div&gt;&lt;div&gt;- Choose appropriate charts (bar/line/donut/pie/scatter/bubble/stacked bar). Use heatmap or treemap only if clearly suitable.`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const usr = `User: ${query}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;${schemaMeta}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Return only:&lt;/div&gt;&lt;div&gt;\`\`\`sql&lt;/div&gt;&lt;div&gt;-- one or more statements&lt;/div&gt;&lt;div&gt;-- last SELECT (if present) should be the final result&lt;/div&gt;&lt;div&gt;\`\`\``;&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { messages:[{role:&#39;system&#39;,content:sys},{role:&#39;user&#39;,content:usr}] };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;function buildSummaryPrompt(question, result){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const sys = `You are a precise analyst. Return clean HTML (2–6 short paragraphs or bullet points).&lt;/div&gt;&lt;div&gt;- Use plain language; include counts, categories, dates, owners if present.&lt;/div&gt;&lt;div&gt;- Explain relationships if relevant.&lt;/div&gt;&lt;div&gt;- Do not invent facts beyond the data. HTML only.`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const usr = `Question:&lt;/div&gt;&lt;div&gt;${question}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Columns:&lt;/div&gt;&lt;div&gt;${result.columns.join(&#39;, &#39;)}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Sample rows (first 50):&lt;/div&gt;&lt;div&gt;${JSON.stringify(result.rows.slice(0,50))}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Schema+metadata:&lt;/div&gt;&lt;div&gt;${buildSchemaText()}`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { messages:[{role:&#39;system&#39;,content:sys},{role:&#39;user&#39;,content:usr}] };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Writes detection */&lt;/div&gt;&lt;div&gt;function isWriteStatement(s){ const t=s.trim().toLowerCase(); return /^(update|delete|insert|drop|alter|create|truncate|pragma|attach|vacuum)/.test(t); }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Execute SQL */&lt;/div&gt;&lt;div&gt;function executeSqlScript(sqlScript){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const statements = sqlScript.split(&#39;;&#39;).map(s=]]]s.trim()).filter(s=]]]s.length]]]0);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const execLog = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; let lastResult = { columns: [], rows: [] };&lt;/div&gt;&lt;div&gt;&amp;nbsp; for (let i=0;i[[[statements.length;i++){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const stmt = statements[i];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const out = db.exec(stmt);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; execLog.push({ index:i+1, stmt, type: out.length ? &#39;SELECT&#39; : &#39;NON-SELECT&#39;, rows: out.length ? out[0].values.length : 0 });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (out.length) lastResult = { columns: out[0].columns, rows: out[0].values };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; else { db.run(stmt); }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } catch (e) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; execLog.push({ index:i+1, stmt, error: e?.message || String(e) });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return { error: e?.message || String(e), execLog, result: { columns: [], rows: [] } };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { execLog, result: lastResult };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Table rendering with sorting */&lt;/div&gt;&lt;div&gt;function buildTableElement(result){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const container = document.createElement(&#39;div&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; container.className = &#39;results&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const table = document.createElement(&#39;table&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const thead=document.createElement(&#39;thead&#39;); const trh=document.createElement(&#39;tr&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; let sortState = { colIndex: null, dir: 1 };&lt;/div&gt;&lt;div&gt;&amp;nbsp; result.columns.forEach((c, idx) =]]] {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const th=document.createElement(&#39;th&#39;); th.textContent=c;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const sortIcon = document.createElement(&#39;span&#39;); sortIcon.className=&#39;sort&#39;; sortIcon.textContent=&#39;⇅&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; th.appendChild(sortIcon);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; th.onclick = ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (sortState.colIndex === idx) sortState.dir *= -1; else { sortState.colIndex = idx; sortState.dir = 1; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const rowsSorted = [...result.rows].sort((a,b)=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const av=a[idx], bv=b[idx];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const an = parseFloat(av), bn = parseFloat(bv);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const bothNum = !isNaN(an) &amp;amp;&amp;amp; !isNaN(bn);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (bothNum) return (an - bn) * sortState.dir;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return String(av||&#39;&#39;).localeCompare(String(bv||&#39;&#39;)) * sortState.dir;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; renderBody(rowsSorted);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; trh.appendChild(th);&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; thead.appendChild(trh); table.appendChild(thead);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tbody=document.createElement(&#39;tbody&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; function renderBody(rows){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tbody.innerHTML=&#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; rows.forEach(r =]]] {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const tr=document.createElement(&#39;tr&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; r.forEach(cell =]]] { const td=document.createElement(&#39;td&#39;); td.textContent = cell==null?&#39;&#39;:String(cell); tr.appendChild(td); });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; tbody.appendChild(tr);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; renderBody(result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; table.appendChild(tbody);&lt;/div&gt;&lt;div&gt;&amp;nbsp; container.appendChild(table);&lt;/div&gt;&lt;div&gt;&amp;nbsp; return container;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Chart inference (heatmap/treemap only when suitable) */&lt;/div&gt;&lt;div&gt;function inferChartSpec(columns, rows){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const n = columns.length;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const sample = rows.slice(0, Math.min(300, rows.length));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const isNumeric = idx =]]] sample.every(r =]]] r[idx]==null || (!isNaN(parseFloat(r[idx])) &amp;amp;&amp;amp; isFinite(r[idx])));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const isDateLike = idx =]]] sample.some(r =]]] /\d{4}-\d{2}-\d{2}/.test(String(r[idx])) || /\d{2}\/\d{2}\/\d{4}/.test(String(r[idx])));&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (n]]]=2 &amp;amp;&amp;amp; columns[0].toLowerCase().includes(&#39;source&#39;) &amp;amp;&amp;amp; columns[1].toLowerCase().includes(&#39;target&#39;)) return { type:&#39;network&#39;, x:0, y:1 };&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (n]]]=3 &amp;amp;&amp;amp; !isNumeric(0) &amp;amp;&amp;amp; !isNumeric(1) &amp;amp;&amp;amp; isNumeric(2)) return { type:&#39;heatmap&#39;, x:0, y:1, v:2 };&lt;/div&gt;&lt;div&gt;&amp;nbsp; for(let i=0;i[[[n;i++) if (!isNumeric(i)) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for(let j=0;j[[[n;j++) if (i!==j &amp;amp;&amp;amp; isNumeric(j) &amp;amp;&amp;amp; sample.length]]]=6) return { type:&#39;treemap&#39;, x:i, y:j };&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; for(let i=0;i[[[n;i++) if (isDateLike(i)) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for(let j=0;j[[[n;j++) if (i!==j &amp;amp;&amp;amp; isNumeric(j)) return { type:&#39;line&#39;, x:i, y:j };&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (n]]]=2 &amp;amp;&amp;amp; isNumeric(0) &amp;amp;&amp;amp; isNumeric(1)) return { type:&#39;scatter&#39;, x:0, y:1 };&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (n]]]=3 &amp;amp;&amp;amp; isNumeric(0) &amp;amp;&amp;amp; isNumeric(1) &amp;amp;&amp;amp; isNumeric(2)) return { type:&#39;bubble&#39;, x:0, y:1, v:2 };&lt;/div&gt;&lt;div&gt;&amp;nbsp; for(let i=0;i[[[n;i++) if (!isNumeric(i)) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for(let j=0;j[[[n;j++) if (i!==j &amp;amp;&amp;amp; isNumeric(j)) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const cats = Array.from(new Set(sample.map(r=]]]String(r[i]))));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (cats.length[[[=8) return { type:&#39;pie&#39;, x:i, y:j };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return { type:&#39;bar&#39;, x:i, y:j };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { type:&#39;table&#39; };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Chart rendering (with datalabels; heatmap axes; treemap fixed) */&lt;/div&gt;&lt;div&gt;function renderChart(canvas, spec, columns, rows){&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(spec.type===&#39;network&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const cy = cytoscape({ container: canvas.parentElement, style:[{selector:&#39;node&#39;,style:{&#39;background-color&#39;:&#39;#5aa9ff&#39;,&#39;label&#39;:&#39;data(label)&#39;,&#39;color&#39;:&#39;#000&#39;,&#39;font-size&#39;:&#39;10px&#39;}},{selector:&#39;edge&#39;,style:{&#39;line-color&#39;:&#39;#7b5cff&#39;}}], layout:{name:&#39;cose&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const nodes = new Map();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; rows.forEach(r=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const s=String(r[spec.x]), t=String(r[spec.y]);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if(!nodes.has(s)) cy.add({ data:{ id:s, label:s } });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if(!nodes.has(t)) cy.add({ data:{ id:t, label:t } });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; cy.add({ data:{ id:`${s}-]]]${t}`, source:s, target:t } });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; nodes.set(s,true); nodes.set(t,true);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; cy.layout({ name:&#39;cose&#39; }).run();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return { destroy: ()=]]]cy.destroy() };&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const ctx = canvas.getContext(&#39;2d&#39;); let chart;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const labels = rows.map(r=]]]String(r[spec.x]));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const values = rows.map(r=]]]parseFloat(r[spec.y]));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const color = &#39;#5aa9ff&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const bg = &#39;rgba(90,169,255,0.35)&#39;;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const commonOpts = {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; responsive:true, maintainAspectRatio:false,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; plugins:{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; legend:{ display:false },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; datalabels:{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; color:&#39;#fff&#39;, anchor:&#39;end&#39;, align:&#39;top&#39;,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; formatter: v=]]] (typeof v===&#39;number&#39; &amp;amp;&amp;amp; isFinite(v)) ? (Math.round(v*100)/100) : v&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; scales:{ x:{ ticks:{ color:&#39;#a2b2c9&#39; } }, y:{ ticks:{ color:&#39;#a2b2c9&#39; } } }&lt;/div&gt;&lt;div&gt;&amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(spec.type===&#39;bar&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, { type:&#39;bar&#39;, data:{ labels, datasets:[{ label: columns[spec.y], data: values, backgroundColor:bg, borderColor:color }] }, options: commonOpts });&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else if(spec.type===&#39;line&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, { type:&#39;line&#39;, data:{ labels, datasets:[{ label: columns[spec.y], data: values, borderColor:color, backgroundColor:bg, fill:false }] }, options: commonOpts });&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else if(spec.type===&#39;pie&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, { type:&#39;doughnut&#39;, data:{ labels, datasets:[{ data: values, backgroundColor: labels.map((_,i)=]]]`hsl(${(i*45)%360},70%,60%)`) }] }, options: { responsive:true, maintainAspectRatio:false, plugins:{ legend:{ display:true, position:&#39;bottom&#39; }, datalabels:{ color:&#39;#000&#39;, formatter:v=]]]v } } } });&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else if(spec.type===&#39;scatter&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const data = rows.map(r=]]]({ x:parseFloat(r[spec.x]), y:parseFloat(r[spec.y]) }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, { type:&#39;scatter&#39;, data:{ datasets:[{ label:`${columns[spec.y]} vs ${columns[spec.x]}`, data, backgroundColor:bg, borderColor:color }] }, options: commonOpts });&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else if(spec.type===&#39;bubble&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const data = rows.map(r=]]]({ x:parseFloat(r[spec.x]), y:parseFloat(r[spec.y]), r:Math.max(3, Math.min(18, Math.abs(parseFloat(r[spec.v]))||6)) }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, { type:&#39;bubble&#39;, data:{ datasets:[{ label:`${columns[spec.y]} vs ${columns[spec.x]}`, data, backgroundColor:bg, borderColor:color }] }, options: commonOpts });&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else if(spec.type===&#39;heatmap&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const xCats = Array.from(new Set(rows.map(r=]]]String(r[spec.x]))));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const yCats = Array.from(new Set(rows.map(r=]]]String(r[spec.y]))));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const matrixData = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; xCats.forEach((xc, xi)=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; yCats.forEach((yc, yi)=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const v = rows.filter(r=]]]String(r[spec.x])===xc &amp;amp;&amp;amp; String(r[spec.y])===yc).reduce((a,b)=]]]a + (parseFloat(b[spec.v])||0), 0);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; matrixData.push({ x: xi, y: yi, v });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; type: &#39;matrix&#39;,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; data: { datasets: [{ label:&#39;Heatmap&#39;, data: matrixData, borderWidth:1, borderColor:&#39;#223046&#39;,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; backgroundColor(ctx){ const v=ctx.dataset.data[ctx.dataIndex].v; const hue=Math.min(200, 50+v*5); return `hsl(${hue},70%,50%)`; },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; width: ({chart}) =]]] (chart.chartArea?.width || 0)/xCats.length - 2,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; height: ({chart}) =]]] (chart.chartArea?.height || 0)/yCats.length - 2&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }]},&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; options: {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; responsive:true, maintainAspectRatio:false,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; plugins:{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; legend:{ display:false },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tooltip:{ callbacks:{ title:(items)=]]]{ const i=items[0].dataIndex; const d=matrixData[i]; return `${xCats[d.x]} × ${yCats[d.y]}`; }, label:(item)=]]]`Value: ${item.raw.v}` } },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; datalabels:{ color:&#39;#fff&#39;, formatter:(v)=]]]v.v }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scales: {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; x:{ ticks:{ color:&#39;#a2b2c9&#39;, callback:(v)=]]]xCats[v] }, grid:{ display:true } },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; y:{ ticks:{ color:&#39;#a2b2c9&#39;, callback:(v)=]]]yCats[v] }, grid:{ display:true } }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else if(spec.type===&#39;treemap&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // Ensure plugin default exists&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; try { Chart.defaults.treemap = Chart.defaults.treemap || {}; } catch{}&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const data = rows.map(r=]]]({ label:String(r[spec.x]), value:parseFloat(r[spec.y])||0 }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; type: &#39;treemap&#39;,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; data: { datasets: [{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tree: data, key: &#39;value&#39;, groups: [&#39;label&#39;], spacing:1,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; backgroundColor: (ctx)=]]]`hsl(${(ctx.dataIndex*45)%360},70%,55%)`,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; borderColor:&#39;#223046&#39;, borderWidth:1,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; labels:{ display:true, formatter:(ctx)=]]]`${ctx.raw._data.label}\n${ctx.raw.v}` },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; font:{ size:10 }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }] },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; options: { responsive:true, maintainAspectRatio:false, plugins:{ legend:{ display:false } } }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { destroy: ()=]]]chart?.destroy?.() };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Tile creation (DOM nodes with functional actions) */&lt;/div&gt;&lt;div&gt;function createTile({ title, description, type, result, spec, sqlBlock, onRefresh }){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tile = document.createElement(&#39;div&#39;); tile.className=&#39;tile&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const header = document.createElement(&#39;div&#39;); header.className=&#39;tile-header&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const hTitle = document.createElement(&#39;div&#39;); hTitle.className=&#39;tile-title&#39;; hTitle.textContent = title;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const actions = document.createElement(&#39;div&#39;); actions.className=&#39;tile-actions&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const btnMax = document.createElement(&#39;button&#39;); btnMax.className=&#39;icon-btn&#39;; btnMax.title=&#39;Maximize&#39;; btnMax.textContent=&#39;⤢&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const btnExplain = document.createElement(&#39;button&#39;); btnExplain.className=&#39;icon-btn&#39;; btnExplain.title=&#39;Explain&#39;; btnExplain.textContent=&#39;✎&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const btnMore = document.createElement(&#39;button&#39;); btnMore.className=&#39;icon-btn&#39;; btnMore.title=&#39;More&#39;; btnMore.textContent=&#39;⋯&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const moreWrap = document.createElement(&#39;div&#39;); moreWrap.className=&#39;more&#39;; moreWrap.appendChild(btnMore);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const moreMenu = document.createElement(&#39;div&#39;); moreMenu.className=&#39;more-menu&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const btnSave = document.createElement(&#39;button&#39;); btnSave.textContent=&#39;Save&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const btnRefresh = document.createElement(&#39;button&#39;); btnRefresh.textContent=&#39;Refresh&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const btnRemove = document.createElement(&#39;button&#39;); btnRemove.textContent=&#39;Remove&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const typeSelect = document.createElement(&#39;select&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; typeSelect.innerHTML = `&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;&quot;]]]Change chart type[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;bar&quot;]]]Bar[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;line&quot;]]]Line[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;pie&quot;]]]Donut[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;scatter&quot;]]]Scatter[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;bubble&quot;]]]Bubble[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;heatmap&quot;]]]Heatmap[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;treemap&quot;]]]Treemap[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;table&quot;]]]Table[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; `;&lt;/div&gt;&lt;div&gt;&amp;nbsp; moreMenu.append(btnSave, btnRefresh, btnRemove, typeSelect);&lt;/div&gt;&lt;div&gt;&amp;nbsp; moreWrap.appendChild(moreMenu);&lt;/div&gt;&lt;div&gt;&amp;nbsp; actions.append(btnMax, btnExplain, moreWrap);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const media = document.createElement(&#39;div&#39;); media.className=&#39;tile-media&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const desc = document.createElement(&#39;div&#39;); desc.className=&#39;tile-desc&#39;; desc.innerHTML = escapeHtml(description);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const explainEl = document.createElement(&#39;div&#39;); explainEl.className=&#39;explain&#39;; explainEl.style.display=&#39;none&#39;;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; tile.append(header, media, desc, explainEl);&lt;/div&gt;&lt;div&gt;&amp;nbsp; header.append(hTitle, actions);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; let destroyFn = null;&lt;/div&gt;&lt;div&gt;&amp;nbsp; function renderContent(res, sp){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; media.innerHTML=&#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if(sp.type===&#39;table&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const tableEl = buildTableElement(res);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; media.appendChild(tableEl);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } else if(sp.type===&#39;capability_map&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const grid=document.createElement(&#39;div&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; grid.style.display=&#39;grid&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; grid.style.gridTemplateColumns=&#39;repeat(auto-fill, minmax(160px, 1fr))&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; grid.style.gap=&#39;8px&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; res.rows.forEach(r=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const card=document.createElement(&#39;div&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; card.style.background=&#39;#121a27&#39;; card.style.border=&#39;1px solid var(--border)&#39;; card.style.borderRadius=&#39;10px&#39;; card.style.padding=&#39;8px&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const name=String(r[0]||&#39;Item&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const props = res.columns.slice(1).map((c,i)=]]]`${c}: ${String(r[i+1]||&#39;&#39;)}`).join(&#39;[[[br]]]&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; card.innerHTML = `[[[div style=&quot;font-weight:700;margin-bottom:6px;&quot;]]]${escapeHtml(name)}[[[/div]]][[[div style=&quot;font-size:12px;color:#a2b2c9;&quot;]]]${props}[[[/div]]]`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; grid.appendChild(card);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; media.appendChild(grid);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const canvas = document.createElement(&#39;canvas&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; canvas.style.width=&#39;100%&#39;; canvas.style.height=&#39;100%&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; media.appendChild(canvas);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const chartCtl = renderChart(canvas, sp, res.columns, res.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; destroyFn = chartCtl.destroy;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; renderContent(result, spec);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; btnMore.onclick = (e)=]]]{ e.stopPropagation(); moreMenu.style.display = moreMenu.style.display===&#39;block&#39; ? &#39;none&#39; : &#39;block&#39;; };&lt;/div&gt;&lt;div&gt;&amp;nbsp; document.addEventListener(&#39;click&#39;, ()=]]]{ moreMenu.style.display=&#39;none&#39;; });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; btnMax.onclick = ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const modal = document.getElementById(&#39;modal&#39;); const body=document.getElementById(&#39;modalBody&#39;); const titleEl=document.getElementById(&#39;modalTitle&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; body.innerHTML=&#39;&#39;; titleEl.textContent = title;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if(spec.type===&#39;table&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const tableEl = buildTableElement(result); tableEl.style.height=&#39;100%&#39;; body.appendChild(tableEl);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } else if(spec.type===&#39;capability_map&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const grid=document.createElement(&#39;div&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; grid.style.display=&#39;grid&#39;; grid.style.gridTemplateColumns=&#39;repeat(auto-fill, minmax(200px, 1fr))&#39;; grid.style.gap=&#39;8px&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; result.rows.forEach(r=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const card=document.createElement(&#39;div&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; card.style.background=&#39;#121a27&#39;; card.style.border=&#39;1px solid var(--border)&#39;; card.style.borderRadius=&#39;10px&#39;; card.style.padding=&#39;8px&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const name=String(r[0]||&#39;Item&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const props = result.columns.slice(1).map((c,i)=]]]`${c}: ${String(r[i+1]||&#39;&#39;)}`).join(&#39;[[[br]]]&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; card.innerHTML = `[[[div style=&quot;font-weight:700;margin-bottom:6px;&quot;]]]${escapeHtml(name)}[[[/div]]][[[div style=&quot;font-size:12px;color:#a2b2c9;&quot;]]]${props}[[[/div]]]`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; grid.appendChild(card);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; body.appendChild(grid);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const canvas = document.createElement(&#39;canvas&#39;); canvas.style.width=&#39;100%&#39;; canvas.style.height=&#39;100%&#39;; body.appendChild(canvas);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; renderChart(canvas, spec, result.columns, result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; modal.style.display=&#39;flex&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; btnSave.onclick = ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const favs = JSON.parse(localStorage.getItem(&#39;favorites&#39;)||&#39;{}&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const list = favs[datasetKey] || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; list.push({ title, description, type: (spec.type===&#39;table&#39;?&#39;table&#39;:&#39;chart&#39;), spec, sqlBlock, timestamp: Date.now() });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; favs[datasetKey] = list;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; localStorage.setItem(&#39;favorites&#39;, JSON.stringify(favs));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; log(`Saved to favorites: ${title}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; moreMenu.style.display=&#39;none&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; btnRefresh.onclick = async ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if(onRefresh){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const newResult = await onRefresh(sqlBlock);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const newSpec = inferChartSpec(newResult.columns, newResult.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if(destroyFn) try{ destroyFn(); }catch{}&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; renderContent(newResult, newSpec);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; moreMenu.style.display=&#39;none&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; btnRemove.onclick = ()=]]]{ tile.remove(); moreMenu.style.display=&#39;none&#39;; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; typeSelect.onchange = ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const val = typeSelect.value;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if(!val) return;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const newSpec = { ...spec, type: val };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if(destroyFn) try{ destroyFn(); }catch{}&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; renderContent(result, newSpec);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; moreMenu.style.display=&#39;none&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; btnExplain.onclick = async ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; explainEl.style.display=&#39;block&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const question = title + &#39; — &#39; + description;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; try{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const { messages: sumMsgs } = buildSummaryPrompt(question, result);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const html = await openaiChat(sumMsgs);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; explainEl.innerHTML = html;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } catch(e){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const topLabel = result.columns[spec?.x ?? 0] || &#39;category&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const valLabel = result.columns[spec?.y ?? 1] || &#39;value&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; explainEl.textContent = `This shows ${valLabel} by ${topLabel}.`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; return tile;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Insert assistant response with summary + tiles horizontally */&lt;/div&gt;&lt;div&gt;function insertResponse(summaryHtml, tiles){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const bubble = appendMessage(&#39;assistant&#39;, summaryHtml ? summaryHtml : &#39;&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tilesRow = document.createElement(&#39;div&#39;); tilesRow.className=&#39;inline-tiles&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; tiles.forEach(t=]]]tilesRow.appendChild(t));&lt;/div&gt;&lt;div&gt;&amp;nbsp; bubble.appendChild(tilesRow);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Favorites chat view */&lt;/div&gt;&lt;div&gt;function loadFavoritesChat(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const favs = JSON.parse(localStorage.getItem(&#39;favorites&#39;)||&#39;{}&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const list = favs[datasetKey] || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; list.slice().reverse().forEach(item=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const result = executeSqlScript(item.sqlBlock).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const spec = item.spec &amp;amp;&amp;amp; item.spec.type ? item.spec : inferChartSpec(result.columns, result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:item.title, description:item.description||&#39;Saved favorite&#39;, type: spec.type===&#39;table&#39;?&#39;table&#39;:&#39;chart&#39;, result, spec, sqlBlock:item.sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; insertResponse(&#39;[[[strong]]]Favorites[[[/strong]]]&#39;, tiles);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Dashboards in chat */&lt;/div&gt;&lt;div&gt;function renderDashboardsChat(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; dashboards.forEach(d=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; d.items.forEach(it=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const result = executeSqlScript(it.sqlBlock).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const spec = it.spec &amp;amp;&amp;amp; it.spec.type ? it.spec : inferChartSpec(result.columns, result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; tiles.push(createTile({ title: it.title, description: it.description || &#39;Dashboard tile&#39;, type: spec.type===&#39;table&#39; ? &#39;table&#39; : &#39;chart&#39;, result, spec, sqlBlock:it.sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; insertResponse(`[[[strong]]]${escapeHtml(d.name)}[[[/strong]]]`, tiles);&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Auto dashboard */&lt;/div&gt;&lt;div&gt;function createAutoDashboard(name=&#39;Dashboard&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const timestamp = new Date().toLocaleString();&lt;/div&gt;&lt;div&gt;&amp;nbsp; const dashName = `${name} — ${timestamp}`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const items = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; const names = Object.keys(schemaCatalog);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!names.length){ appendMessage(&#39;assistant&#39;,&#39;No tables loaded to build a dashboard.&#39;); return; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const t = names[0];&lt;/div&gt;&lt;div&gt;&amp;nbsp; const cols = schemaCatalog[t].columns.map(c=]]]c.name);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const catCol = cols.find(c=]]]/category|type|segment|region/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const statusCol = cols.find(c=]]]/status|state|phase/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const dateCol = cols.find(c=]]]/date|created|updated|time/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const ownerCol = cols.find(c=]]]/owner|user|assignee|account/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const nameCol = cols.find(c=]]]/name|application|app|title/i.test(c)) || cols[0];&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // KPI cards (as mini tables for simplicity and reliability)&lt;/div&gt;&lt;div&gt;&amp;nbsp; items.push({ title:&#39;Total records&#39;, description:&#39;Total row count&#39;, sqlBlock:`SELECT COUNT(*) AS total FROM &quot;${t}&quot;`, spec:{type:&#39;table&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(ownerCol) items.push({ title:&#39;Distinct owners&#39;, description:&#39;Unique owners&#39;, sqlBlock:`SELECT COUNT(DISTINCT &quot;${ownerCol}&quot;) AS owners FROM &quot;${t}&quot;`, spec:{type:&#39;table&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(catCol) items.push({ title:&#39;Distinct categories&#39;, description:&#39;Unique categories&#39;, sqlBlock:`SELECT COUNT(DISTINCT &quot;${catCol}&quot;) AS categories FROM &quot;${t}&quot;`, spec:{type:&#39;table&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(dateCol) items.push({ title:&#39;Latest activity&#39;, description:&#39;Most recent date&#39;, sqlBlock:`SELECT MAX(&quot;${dateCol}&quot;) AS latest_date FROM &quot;${t}&quot;`, spec:{type:&#39;table&#39;} });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // Charts&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (statusCol) items.push({ title:&#39;Status breakdown&#39;, description:&#39;Distribution of statuses&#39;, sqlBlock:`SELECT &quot;${statusCol}&quot; AS status, COUNT(*) AS count FROM &quot;${t}&quot; GROUP BY &quot;${statusCol}&quot; ORDER BY count DESC`, spec:{type:&#39;pie&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (catCol) items.push({ title:&#39;Category distribution&#39;, description:&#39;By category&#39;, sqlBlock:`SELECT &quot;${catCol}&quot; AS category, COUNT(*) AS count FROM &quot;${t}&quot; GROUP BY &quot;${catCol}&quot; ORDER BY count DESC`, spec:{type:&#39;bar&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (dateCol) items.push({ title:&#39;Monthly trend&#39;, description:&#39;Time series (counts)&#39;, sqlBlock:`SELECT substr(&quot;${dateCol}&quot;,1,7) AS month, COUNT(*) AS count FROM &quot;${t}&quot; GROUP BY month ORDER BY month`, spec:{type:&#39;line&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (ownerCol) items.push({ title:&#39;Top owners&#39;, description:&#39;Owners by count&#39;, sqlBlock:`SELECT &quot;${ownerCol}&quot; AS owner, COUNT(*) AS count FROM &quot;${t}&quot; GROUP BY &quot;${ownerCol}&quot; ORDER BY count DESC LIMIT 15`, spec:{type:&#39;bar&#39;} });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // Capability/Application map&lt;/div&gt;&lt;div&gt;&amp;nbsp; const mapSQL = `SELECT &quot;${nameCol}&quot; AS name, &quot;${statusCol||catCol||ownerCol||nameCol}&quot; AS prop1, &quot;${ownerCol||catCol||statusCol||nameCol}&quot; AS prop2 FROM &quot;${t}&quot; LIMIT 30`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; items.push({ title:&#39;Capability/Application map&#39;, description:&#39;Overview grid with properties&#39;, sqlBlock:mapSQL, spec:{type:&#39;capability_map&#39;} });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; dashboards.push({ name: dashName, items });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // Render immediately in chat&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; items.forEach(it=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const result = executeSqlScript(it.sqlBlock).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:it.title, description:it.description, type: it.spec.type===&#39;table&#39;?&#39;table&#39;:&#39;chart&#39;, result, spec:it.spec, sqlBlock:it.sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; insertResponse(`[[[strong]]]${escapeHtml(dashName)}[[[/strong]]]`, tiles);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Data Quality (tiles in chat) */&lt;/div&gt;&lt;div&gt;function populateDQTableSelect(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const sel=document.getElementById(&#39;dqTableSelect&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; sel.innerHTML=&#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; Object.keys(schemaCatalog).forEach(t=]]]{ const opt=document.createElement(&#39;option&#39;); opt.value=t; opt.textContent=t; sel.appendChild(opt); });&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;function runDataQuality(table){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; const cols = schemaCatalog[table]?.columns || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!cols.length){ appendMessage(&#39;assistant&#39;, &#39;No columns found for DQ.&#39;); return; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const nullDistinctSQL = `SELECT ${cols.map(c=]]]`SUM(CASE WHEN &quot;${c.name}&quot; IS NULL OR TRIM(&quot;${c.name}&quot;)=&#39;&#39; THEN 1 ELSE 0 END) AS ${c.name}_nulls, COUNT(DISTINCT &quot;${c.name}&quot;) AS ${c.name}_distincts`).join(&#39;, &#39;)} FROM &quot;${table}&quot;`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; tiles.push(createTile({ title:&#39;Nulls &amp;amp; distincts&#39;, description:&#39;Null/Distinct per column&#39;, type:&#39;table&#39;, result:executeSqlScript(nullDistinctSQL).result, spec:{type:&#39;table&#39;}, sqlBlock:nullDistinctSQL, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const idCols = cols.filter(c=]]]/id$|_id$|id_/i.test(c.name));&lt;/div&gt;&lt;div&gt;&amp;nbsp; idCols.forEach(ic=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const dupSQL = `SELECT &quot;${ic.name}&quot; AS id, COUNT(*) AS cnt FROM &quot;${table}&quot; GROUP BY &quot;${ic.name}&quot; HAVING COUNT(*)]]]1 ORDER BY cnt DESC LIMIT 100`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const resDup = executeSqlScript(dupSQL).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (resDup.rows.length) tiles.push(createTile({ title:`Duplicates in ${ic.name}`, description:&#39;Same ID appears multiple times&#39;, type:&#39;table&#39;, result:resDup, spec:{type:&#39;table&#39;}, sqlBlock:dupSQL, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const numCandidates = cols.filter(c=]]]c.name &amp;amp;&amp;amp; c.name.match(/amount|count|value|size|score|age|num|quantity|price|metric|total/i));&lt;/div&gt;&lt;div&gt;&amp;nbsp; numCandidates.forEach(c=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const valsRes = executeSqlScript(`SELECT &quot;${c.name}&quot; FROM &quot;${table}&quot; WHERE &quot;${c.name}&quot; IS NOT NULL`).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const vals = valsRes.rows.map(r=]]]parseFloat(r[0])).filter(v=]]]!isNaN(v)).sort((a,b)=]]]a-b);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if(vals.length]]]=10){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const q1 = vals[Math.floor(vals.length*0.25)];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const q3 = vals[Math.floor(vals.length*0.75)];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const iqr = q3-q1;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const lo = q1 - 1.5*iqr, hi = q3 + 1.5*iqr;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const outRows = executeSqlScript(`SELECT &quot;${c.name}&quot; AS value FROM &quot;${table}&quot; WHERE CAST(&quot;${c.name}&quot; AS REAL)[[[${lo} OR CAST(&quot;${c.name}&quot; AS REAL)]]]${hi} LIMIT 200`).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if(outRows.rows.length) tiles.push(createTile({ title:`Outliers in ${c.name}`, description:`Outside IQR ${lo.toFixed(2)}–${hi.toFixed(2)}`, type:&#39;table&#39;, result:outRows, spec:{type:&#39;table&#39;}, sqlBlock:`(IQR filter for ${c.name})`, onRefresh: async ()=]]]outRows }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const catAttr = Object.keys(excelMetaMap).find(k=]]]excelMetaMap[k].split(&#39;,&#39;).length]]]1);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(catAttr &amp;amp;&amp;amp; cols.some(c=]]]c.name===sanitizeName(catAttr))){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const attr = sanitizeName(catAttr);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const covSQL = `SELECT &quot;${attr}&quot; AS category, COUNT(*) AS count FROM &quot;${table}&quot; GROUP BY &quot;${attr}&quot; ORDER BY count DESC`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const res3 = executeSqlScript(covSQL).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const spec3 = inferChartSpec(res3.columns, res3.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:&#39;Category coverage&#39;, description:`Distribution over ${attr}`, type:&#39;chart&#39;, result:res3, spec: spec3.type===&#39;table&#39;?{type:&#39;bar&#39;,x:0,y:1}:spec3, sqlBlock:covSQL, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; insertResponse(`[[[strong]]]Data quality: ${escapeHtml(table)}[[[/strong]]]`, tiles);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* NL flow */&lt;/div&gt;&lt;div&gt;async function runNl(q){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const pii = detectPII(q);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const inj = detectPromptInjection(q);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (pii.length || inj.length) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const warnMsg = `Warning: Detected ${[...pii.map(x=]]]`PII: ${x}`), ...inj.map(x=]]]x)].join(&#39;, &#39;)}.\nProceed to send to LLM?`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const proceed = confirm(warnMsg);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!proceed) { appendMessage(&#39;assistant&#39;,&#39;Request cancelled due to guardrails.&#39;); return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // Dashboard intent&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\bdashboard\b/i.test(q)) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; createAutoDashboard(&#39;Dashboard&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; appendMessage(&#39;assistant&#39;, &#39;Dashboard created. View it here or open the Dashboards tab.&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return;&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; appendMessage(&#39;user&#39;, escapeHtml(q));&lt;/div&gt;&lt;div&gt;&amp;nbsp; setActivity(true, &#39;plan&#39;);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const { messages } = buildPlanningPrompt(q);&lt;/div&gt;&lt;div&gt;&amp;nbsp; let sqlBlock = await openaiChat(messages);&lt;/div&gt;&lt;div&gt;&amp;nbsp; sqlBlock = stripFence(sqlBlock);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const allowWrites = document.getElementById(&#39;allowWrites&#39;).checked;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const stmts = sqlBlock.split(&#39;;&#39;).map(s=]]]s.trim()).filter(s=]]]s.length]]]0);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const hasWrite = stmts.some(isWriteStatement);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (hasWrite &amp;amp;&amp;amp; !allowWrites) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const proceed = confirm(&#39;This includes write/DDL statements. Proceed?&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!proceed) { appendMessage(&#39;assistant&#39;,&#39;Execution cancelled. Enable &quot;Allow writes&quot; to skip prompts.&#39;); setActivity(false); return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; setActivity(true, &#39;exec&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const exec = executeSqlScript(sqlBlock);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (exec.error) { appendMessage(&#39;assistant&#39;, `Error: ${escapeHtml(exec.error)}`); setActivity(false); return; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const mode = document.getElementById(&#39;responseMode&#39;).value;&lt;/div&gt;&lt;div&gt;&amp;nbsp; let summaryHtml = &#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (mode === &#39;summary&#39; || mode === &#39;both&#39;) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; setActivity(true, &#39;summ&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const { messages: sumMsgs } = buildSummaryPrompt(q, exec.result);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; summaryHtml = await openaiChat(sumMsgs);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } catch(e){ summaryHtml = `Summary unavailable: ${escapeHtml(e?.message||String(e))}`; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (summaryHtml) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; summaryHtml += `[[[span class=&quot;ref-badge&quot; title=&quot;${escapeHtml(`SQL:\n${sqlBlock}\n\nColumns: ${exec.result.columns.join(&#39;, &#39;)}\nRows: ${exec.result.rows.length}`)}&quot;]]]ref[[[/span]]]`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (mode === &#39;table&#39; || mode === &#39;tiles&#39; || mode === &#39;both&#39;) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const spec = inferChartSpec(exec.result.columns, exec.result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // Table tile always first&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:&#39;Tabular result&#39;, description:&#39;Query output (sortable)&#39;, type:&#39;table&#39;, result:exec.result, spec:{type:&#39;table&#39;}, sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // Chart tile if applicable&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (spec.type!==&#39;table&#39; &amp;amp;&amp;amp; mode !== &#39;table&#39;) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const chartName = spec.type.charAt(0).toUpperCase()+spec.type.slice(1);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:`${chartName} chart`, description:`Auto visualization (${chartName})`, type:&#39;chart&#39;, result:exec.result, spec, sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; insertResponse(summaryHtml, tiles);&lt;/div&gt;&lt;div&gt;&amp;nbsp; setActivity(false);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Manual SQL flow */&lt;/div&gt;&lt;div&gt;async function runManual(sqlInput){&lt;/div&gt;&lt;div&gt;&amp;nbsp; let sqlBlock = stripFence(sqlInput);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const allowWrites = document.getElementById(&#39;allowWrites&#39;).checked;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const stmts = sqlBlock.split(&#39;;&#39;).map(s=]]]s.trim()).filter(s=]]]s.length]]]0);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const hasWrite = stmts.some(isWriteStatement);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (hasWrite &amp;amp;&amp;amp; !allowWrites) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const proceed = confirm(&#39;This includes write/DDL statements. Proceed?&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!proceed) { appendMessage(&#39;assistant&#39;,&#39;Execution cancelled.&#39;); return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; appendMessage(&#39;user&#39;, `[[[div class=&quot;code&quot;]]]${escapeHtml(sqlBlock)}[[[/div]]]`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; setActivity(true, &#39;exec&#39;);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const exec = executeSqlScript(sqlBlock);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (exec.error) { appendMessage(&#39;assistant&#39;, `Error: ${escapeHtml(exec.error)}`); setActivity(false); return; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const mode = document.getElementById(&#39;responseMode&#39;).value;&lt;/div&gt;&lt;div&gt;&amp;nbsp; let summaryHtml = &#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (mode === &#39;summary&#39; || mode === &#39;both&#39;) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; setActivity(true, &#39;summ&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const { messages: sumMsgs } = buildSummaryPrompt(&#39;(Manual SQL)&#39;, exec.result);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; summaryHtml = await openaiChat(sumMsgs);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } catch(e){ summaryHtml = `Summary unavailable: ${escapeHtml(e?.message||String(e))}`; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (mode === &#39;table&#39; || mode === &#39;tiles&#39; || mode === &#39;both&#39;) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const spec = inferChartSpec(exec.result.columns, exec.result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:&#39;Tabular result&#39;, description:&#39;Query output (sortable)&#39;, type:&#39;table&#39;, result:exec.result, spec:{type:&#39;table&#39;}, sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (spec.type!==&#39;table&#39; &amp;amp;&amp;amp; mode !== &#39;table&#39;) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const chartName = spec.type.charAt(0).toUpperCase()+spec.type.slice(1);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:`${chartName} chart`, description:`Auto visualization (${chartName})`, type:&#39;chart&#39;, result:exec.result, spec, sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; insertResponse(summaryHtml, tiles);&lt;/div&gt;&lt;div&gt;&amp;nbsp; setActivity(false);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Favorites */&lt;/div&gt;&lt;div&gt;function loadFavoritesChat(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const favs = JSON.parse(localStorage.getItem(&#39;favorites&#39;)||&#39;{}&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const list = favs[datasetKey] || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; list.slice().reverse().forEach(item=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const result = executeSqlScript(item.sqlBlock).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const spec = item.spec &amp;amp;&amp;amp; item.spec.type ? item.spec : inferChartSpec(result.columns, result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:item.title, description:item.description||&#39;Saved favorite&#39;, type: spec.type===&#39;table&#39;?&#39;table&#39;:&#39;chart&#39;, result, spec, sqlBlock:item.sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; insertResponse(&#39;[[[strong]]]Favorites[[[/strong]]]&#39;, tiles);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Events */&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;askBtn&#39;).onclick = async ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; const q=document.getElementById(&#39;nlInput&#39;).value.trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!q) return;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (!Object.keys(schemaCatalog).length) { appendMessage(&#39;assistant&#39;,&#39;Please load an Excel file first.&#39;); return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; try { await runNl(q); } catch(e){ appendMessage(&#39;assistant&#39;, `Error: ${escapeHtml(e?.message||String(e))}`); setActivity(false); }&lt;/div&gt;&lt;div&gt;&amp;nbsp; document.getElementById(&#39;nlInput&#39;).value=&#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; document.getElementById(&#39;suggestOverlay&#39;).style.display=&#39;none&#39;;&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;runSqlBtn&#39;).onclick = async ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; const sql=document.getElementById(&#39;manualSql&#39;).value.trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!sql) return;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (!Object.keys(schemaCatalog).length) { appendMessage(&#39;assistant&#39;,&#39;Please load an Excel file first.&#39;); return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; try { await runManual(sql); } catch(e){ appendMessage(&#39;assistant&#39;, `Error: ${escapeHtml(e?.message||String(e))}`); setActivity(false); }&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;loadExcelBtn&#39;).onclick = async ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; const file=document.getElementById(&#39;excelInput&#39;).files[0];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!file){ document.getElementById(&#39;loadStatus&#39;).textContent=&#39;Please select an Excel file.&#39;; return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; document.getElementById(&#39;loadStatus&#39;).textContent=&#39;Reading Excel...&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!db) await initSQLite();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; excelMetaMap = {};&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const ab = await new Promise((resolve, reject)=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const reader=new FileReader();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; reader.onerror=()=]]]reject(new Error(&#39;Failed to read file&#39;));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; reader.onabort=()=]]]reject(new Error(&#39;File read aborted&#39;));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; reader.onload=()=]]]resolve(reader.result);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; reader.readAsArrayBuffer(file);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const wb = XLSX.read(ab, { type:&#39;array&#39; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const sheetNames = wb.SheetNames || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!sheetNames.length) { document.getElementById(&#39;loadStatus&#39;).textContent=&#39;No sheets found.&#39;; return; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; schemaCatalog = {};&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; let created=0;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for (const name of sheetNames){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const ws = wb.Sheets[name];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const { rows, metaAdded } = parseSheet(ws, name);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (metaAdded) continue;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (!rows.length){ log(`Sheet &quot;${name}&quot; empty after parsing; skipped.`); continue; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const { ddl, columns, table } = buildDDL(name, rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; db.run(`DROP TABLE IF EXISTS &quot;${table}&quot;`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; db.run(ddl);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; insertRows(table, rows, columns);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; schemaCatalog[table] = { columns };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log(`Loaded sheet &quot;${name}&quot; as table &quot;${table}&quot; (${rows.length} rows).`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; created++;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; } catch(e) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; document.getElementById(&#39;loadStatus&#39;).textContent = `Error creating table &quot;${name}&quot;: ${e?.message||e}`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log(`Error creating table &quot;${name}&quot;: ${e?.message||e}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; renderSchema();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; populateDQTableSelect();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; document.getElementById(&#39;loadStatus&#39;).textContent=`Loaded ${created} table(s).`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; appendMessage(&#39;assistant&#39;, created ? &#39;Excel loaded. You can now talk to the database.&#39; : &#39;Excel parsed, but no data rows found.&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; } catch(e){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; document.getElementById(&#39;loadStatus&#39;).textContent=&#39;Error loading Excel: &#39;+(e?.message||String(e));&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;resetDbBtn&#39;).onclick = async ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!db) await initSQLite();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; try { db.close(); } catch {}&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; db = new SQLModule.Database();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; schemaCatalog = {};&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; excelMetaMap = {};&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; document.getElementById(&#39;schemaPanel&#39;).textContent=&#39;No tables loaded.&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [&#39;messages&#39;,&#39;dashMessages&#39;,&#39;favMessages&#39;,&#39;dqMessages&#39;].forEach(id=]]]document.getElementById(id).innerHTML=&#39;&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; document.getElementById(&#39;loadStatus&#39;).textContent=&#39;Database reset.&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; appendMessage(&#39;assistant&#39;,&#39;Database reset. Please upload an Excel file to continue.&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; } catch(e){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; document.getElementById(&#39;loadStatus&#39;).textContent=&#39;Error: &#39;+(e?.message||String(e));&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;runDQBtn&#39;).onclick = ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; const t = document.getElementById(&#39;dqTableSelect&#39;).value;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!t) return;&lt;/div&gt;&lt;div&gt;&amp;nbsp; runDataQuality(t);&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Modal */&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;closeModalBtn&#39;).onclick = ()=]]]{ document.getElementById(&#39;modal&#39;).style.display=&#39;none&#39;; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Init */&lt;/div&gt;&lt;div&gt;(async ()=]]]{ try { await initSQLite(); } catch(e){ log(&#39;Init error: &#39;+(e?.message||String(e))); } })();&lt;/div&gt;&lt;div&gt;[[[/script]]]&lt;/div&gt;&lt;div&gt;[[[/body]]]&lt;/div&gt;&lt;div&gt;[[[/html]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;aspect=fixed;" parent="1" vertex="1">
          <mxGeometry x="-140" y="200" width="420" height="420" as="geometry" />
        </mxCell>
        <mxCell id="cENY06w-exeQAe9jAUdj-1" value="Start" style="ellipse;whiteSpace=wrap;html=1;aspect=fixed;" parent="1" vertex="1">
          <mxGeometry x="90" y="-19750" width="80" height="80" as="geometry" />
        </mxCell>
        <mxCell id="cENY06w-exeQAe9jAUdj-2" value="&lt;div&gt;[[[!doctype html]]]&lt;/div&gt;&lt;div&gt;[[[html lang=&quot;en&quot;]]]&lt;/div&gt;&lt;div&gt;[[[head]]]&lt;/div&gt;&lt;div&gt;[[[meta charset=&quot;utf-8&quot;]]]&lt;/div&gt;&lt;div&gt;[[[title]]]World‑Class Data Chat (Fixed)[[[/title]]]&lt;/div&gt;&lt;div&gt;[[[meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[[[!-- SheetJS --]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;[[[!-- sql.js --]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.8.0/sql-wasm.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;[[[!-- Chart.js core --]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;[[[!-- Chart.js plugins --]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdn.jsdelivr.net/npm/chartjs-chart-treemap@3.3.0/dist/chartjs-chart-treemap.min.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdn.jsdelivr.net/npm/chartjs-chart-matrix@2.0.1/dist/chartjs-chart-matrix.min.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;[[[!-- Cytoscape --]]]&lt;/div&gt;&lt;div&gt;[[[script src=&quot;https://cdn.jsdelivr.net/npm/cytoscape@3.26.0/dist/cytoscape.min.js&quot;]]][[[/script]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[[[style]]]&lt;/div&gt;&lt;div&gt;:root {&lt;/div&gt;&lt;div&gt;&amp;nbsp; --bg:#0c0f14; --panel:#121a27; --panel2:#0f1826; --border:#223046;&lt;/div&gt;&lt;div&gt;&amp;nbsp; --text:#e7eef8; --muted:#a2b2c9; --accent:#5aa9ff; --accent2:#7b5cff;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;* { box-sizing:border-box; }&lt;/div&gt;&lt;div&gt;body { margin:0; background:var(--bg); color:var(--text); font-family:Inter,system-ui,sans-serif; display:flex; height:100vh; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Sidebar */&lt;/div&gt;&lt;div&gt;.sidebar { width:340px; background:linear-gradient(180deg,var(--panel),var(--panel2)); border-right:1px solid var(--border); overflow:auto; transition:width .2s ease; }&lt;/div&gt;&lt;div&gt;.sidebar.collapsed { width:56px; }&lt;/div&gt;&lt;div&gt;.sidebar.collapsed .panel { display:none; }&lt;/div&gt;&lt;div&gt;.mini-icons { display:flex; gap:8px; padding:10px; justify-content:center; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Main */&lt;/div&gt;&lt;div&gt;.main { flex:1; display:flex; flex-direction:column; }&lt;/div&gt;&lt;div&gt;.topbar { padding:10px; border-bottom:1px solid var(--border); display:flex; justify-content:space-between; align-items:center; }&lt;/div&gt;&lt;div&gt;.topbar .brand { font-weight:800; }&lt;/div&gt;&lt;div&gt;.topbar .toggle { background:#0d1622; border:1px solid var(--border); color:#fff; padding:6px 10px; border-radius:8px; cursor:pointer; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Tabs */&lt;/div&gt;&lt;div&gt;.tabs { display:flex; gap:8px; padding:8px 16px; border-bottom:1px solid var(--border); }&lt;/div&gt;&lt;div&gt;.tabs button { background:#0d1622; border:1px solid var(--border); color:#fff; padding:6px 10px; border-radius:8px; cursor:pointer; }&lt;/div&gt;&lt;div&gt;.tabs button.active { background:linear-gradient(135deg,var(--accent),var(--accent2)); color:#000; font-weight:800; border:none; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Views */&lt;/div&gt;&lt;div&gt;.view { flex:1; display:none; overflow:auto; }&lt;/div&gt;&lt;div&gt;.view.active { display:flex; flex-direction:column; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Chat */&lt;/div&gt;&lt;div&gt;.messages { flex:1; overflow:auto; padding:16px; display:flex; flex-direction:column; gap:12px; }&lt;/div&gt;&lt;div&gt;.msg { max-width:80%; }&lt;/div&gt;&lt;div&gt;.msg.user { align-self:flex-end; }&lt;/div&gt;&lt;div&gt;.msg.assistant { align-self:flex-start; }&lt;/div&gt;&lt;div&gt;.bubble { padding:10px 14px; border-radius:14px; font-size:14px; line-height:1.45; background:#0d1622; border:1px solid var(--border); }&lt;/div&gt;&lt;div&gt;.bubble.user { background:#1e3354; border-color:#1f3556; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Activity */&lt;/div&gt;&lt;div&gt;.activity { padding:8px 16px; font-size:13px; color:var(--muted); display:none; }&lt;/div&gt;&lt;div&gt;.activity .step { display:inline-block; margin-right:12px; }&lt;/div&gt;&lt;div&gt;.activity .dots span { display:inline-block; animation:blink 1.4s infinite both; }&lt;/div&gt;&lt;div&gt;.activity .dots span:nth-child(2){ animation-delay:.2s; } .activity .dots span:nth-child(3){ animation-delay:.4s; }&lt;/div&gt;&lt;div&gt;@keyframes blink{0%{opacity:.2;}20%{opacity:1;}100%{opacity:.2;}}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Composer + Suggestions */&lt;/div&gt;&lt;div&gt;.composer-wrap { position:sticky; bottom:0; background:var(--bg); border-top:1px solid var(--border); }&lt;/div&gt;&lt;div&gt;.composer { display:flex; gap:8px; padding:10px 16px; flex-wrap:wrap; }&lt;/div&gt;&lt;div&gt;.composer textarea { flex:1; resize:none; border:none; outline:none; background:transparent; color:#fff; font-size:15px; padding:8px; }&lt;/div&gt;&lt;div&gt;.composer .send { width:40px; height:40px; border:none; border-radius:50%; background:linear-gradient(135deg,var(--accent),var(--accent2)); color:#000; font-weight:800; cursor:pointer; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;.suggest-overlay { position:sticky; bottom:64px; display:none; padding:8px; }&lt;/div&gt;&lt;div&gt;.suggest-panel { margin-left:auto; max-width:40%; background:#0d1622; border:1px solid var(--border); border-radius:12px; box-shadow:0 8px 24px rgba(0,0,0,0.4); }&lt;/div&gt;&lt;div&gt;.suggest-grid { display:flex; flex-wrap:wrap; gap:6px; padding:8px; }&lt;/div&gt;&lt;div&gt;.suggest-chip { background:#121a27; border:1px solid var(--border); color:#fff; border-radius:12px; padding:6px 10px; cursor:pointer; font-size:12px; }&lt;/div&gt;&lt;div&gt;.suggest-chip.prime { background:linear-gradient(135deg,var(--accent),var(--accent2)); color:#000; border:none; font-weight:700; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Tiles (inside chat bubbles) */&lt;/div&gt;&lt;div&gt;.inline-tiles { display:flex; gap:12px; flex-wrap:wrap; }&lt;/div&gt;&lt;div&gt;.tile { width:360px; background:#0d1622; border:1px solid var(--border); border-radius:12px; padding:10px; display:flex; flex-direction:column; gap:8px; }&lt;/div&gt;&lt;div&gt;.tile-header { display:flex; justify-content:space-between; align-items:center; }&lt;/div&gt;&lt;div&gt;.tile-title { font-weight:700; font-size:14px; }&lt;/div&gt;&lt;div&gt;.tile-actions { display:flex; gap:6px; align-items:center; }&lt;/div&gt;&lt;div&gt;.icon-btn { background:#121a27; border:1px solid var(--border); color:#fff; padding:6px; border-radius:8px; font-size:12px; cursor:pointer; display:flex; align-items:center; justify-content:center; }&lt;/div&gt;&lt;div&gt;.more { position:relative; }&lt;/div&gt;&lt;div&gt;.more-menu { position:absolute; right:0; top:28px; background:#0d1622; border:1px solid var(--border); border-radius:8px; padding:6px; display:none; z-index:10; }&lt;/div&gt;&lt;div&gt;.more-menu button, .more-menu select { display:block; width:180px; text-align:left; margin:4px 0; background:#121a27; color:#fff; border:1px solid var(--border); border-radius:8px; padding:6px; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;.tile-media { width:100%; height:240px; border:1px solid var(--border); border-radius:8px; overflow:hidden; display:flex; align-items:center; justify-content:center; background:#0b0f14; }&lt;/div&gt;&lt;div&gt;.tile-desc { font-size:12px; color:#a2b2c9; }&lt;/div&gt;&lt;div&gt;.explain { font-size:12px; color:#a2b2c9; border-top:1px dashed var(--border); padding-top:6px; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Table */&lt;/div&gt;&lt;div&gt;.results { width:100%; height:100%; overflow:auto; }&lt;/div&gt;&lt;div&gt;table { width:100%; border-collapse:collapse; font-size:13px; }&lt;/div&gt;&lt;div&gt;th, td { border-bottom:1px solid var(--border); padding:6px 8px; text-align:left; }&lt;/div&gt;&lt;div&gt;th { background:#0d1622; position:sticky; top:0; cursor:pointer; color:#fff; }&lt;/div&gt;&lt;div&gt;th .sort { opacity:.6; font-size:11px; margin-left:6px; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Modal */&lt;/div&gt;&lt;div&gt;.modal { position:fixed; inset:0; display:none; align-items:center; justify-content:center; background:rgba(0,0,0,0.6); z-index:9999; }&lt;/div&gt;&lt;div&gt;.modal-content { background:#0d1622; border:1px solid var(--border); border-radius:12px; max-width:92vw; max-height:88vh; width:92vw; height:88vh; display:flex; flex-direction:column; }&lt;/div&gt;&lt;div&gt;.modal-header { padding:8px; display:flex; justify-content:space-between; align-items:center; border-bottom:1px solid var(--border); }&lt;/div&gt;&lt;div&gt;.modal-body { flex:1; overflow:auto; padding:8px; }&lt;/div&gt;&lt;div&gt;.close-btn { background:#1f2b3f; border:1px solid var(--border); color:#fff; padding:6px 10px; border-radius:8px; cursor:pointer; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Sidebar panels */&lt;/div&gt;&lt;div&gt;.panel { padding:12px; border-bottom:1px solid var(--border); }&lt;/div&gt;&lt;div&gt;.panel h3 { margin:6px 0 10px; font-size:16px; }&lt;/div&gt;&lt;div&gt;.input, textarea, button, select, label.checkbox {&lt;/div&gt;&lt;div&gt;&amp;nbsp; width:100%; background:#0d1622; border:1px solid var(--border); color:#fff;&lt;/div&gt;&lt;div&gt;&amp;nbsp; padding:8px; border-radius:8px; margin:4px 0; font-size:14px;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;button.primary { background:linear-gradient(135deg,var(--accent),var(--accent2)); color:#000; font-weight:800; border:none; }&lt;/div&gt;&lt;div&gt;.status { font-size:12px; color:#a2b2c9; white-space:pre-line; }&lt;/div&gt;&lt;div&gt;.checkbox { display:flex; align-items:center; gap:8px; }&lt;/div&gt;&lt;div&gt;.ref-badge { display:inline-block; margin-left:6px; padding:2px 6px; border-radius:8px; border:1px solid var(--border); background:#0d1622; color:#a2b2c9; font-size:11px; cursor:help; }&lt;/div&gt;&lt;div&gt;[[[/style]]]&lt;/div&gt;&lt;div&gt;[[[/head]]]&lt;/div&gt;&lt;div&gt;[[[body]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[[[!-- Sidebar --]]]&lt;/div&gt;&lt;div&gt;[[[div class=&quot;sidebar&quot; id=&quot;sidebar&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;mini-icons&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button id=&quot;miniToggle&quot; title=&quot;Toggle sidebar&quot;]]]☰[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[h3]]]Controls[[[/h3]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[input id=&quot;openaiKey&quot; class=&quot;input&quot; type=&quot;password&quot; placeholder=&quot;OpenAI API Key (sk-...)&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[select id=&quot;modelSelect&quot; class=&quot;input&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;gpt-4o-mini&quot; selected]]]gpt-4o-mini[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;gpt-4o&quot;]]]gpt-4o[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;gpt-4.1-mini&quot;]]]gpt-4.1-mini[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/select]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[select id=&quot;responseMode&quot; class=&quot;input&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;both&quot; selected]]]Summary + Tiles[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;summary&quot;]]]Summary only[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;tiles&quot;]]]Tiles only[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[option value=&quot;table&quot;]]]Table only[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/select]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[label class=&quot;checkbox&quot;]]][[[input type=&quot;checkbox&quot; id=&quot;allowWrites&quot;]]] Allow writes (UPDATE/DELETE/DDL) with confirmation[[[/label]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[h3]]]Load Excel[[[/h3]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;status&quot;]]]Include a metadata sheet with two columns: attribute and description/categories.[[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[input type=&quot;file&quot; id=&quot;excelInput&quot; accept=&quot;.xlsx,.xls&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button class=&quot;primary&quot; id=&quot;loadExcelBtn&quot;]]]Load Excel[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button id=&quot;resetDbBtn&quot;]]]Reset DB[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div id=&quot;loadStatus&quot; class=&quot;status&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[h3]]]Metadata enrichment[[[/h3]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;status&quot;]]]Descriptions (JSON): {&quot;applications&quot;:&quot;id, name, status, category, owner, created_at&quot;}[[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[textarea id=&quot;metaDescriptions&quot; rows=&quot;6&quot;]]][[[/textarea]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;status&quot;]]]Relationships (JSON): {&quot;applications.application_id&quot;:[&quot;connections.application_id&quot;,&quot;transactions.application_id&quot;]}[[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[textarea id=&quot;metaRelationships&quot; rows=&quot;6&quot;]]][[[/textarea]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[h3]]]Manual SQL[[[/h3]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[textarea id=&quot;manualSql&quot; rows=&quot;4&quot; placeholder=&quot;Paste SQL (multi-statements; ```sql fences accepted)&quot;]]][[[/textarea]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button class=&quot;primary&quot; id=&quot;runSqlBtn&quot;]]]Execute[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div id=&quot;sqlStatus&quot; class=&quot;status&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[h3]]]Schema[[[/h3]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div id=&quot;schemaPanel&quot; class=&quot;status&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[h3]]]System log[[[/h3]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div id=&quot;systemLog&quot; class=&quot;status&quot; style=&quot;max-height:200px; overflow:auto;&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;[[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[[[!-- Main --]]]&lt;/div&gt;&lt;div&gt;[[[div class=&quot;main&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;topbar&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;brand&quot;]]]Data Chat[[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button class=&quot;toggle&quot; id=&quot;toggleSidebar&quot;]]]☰[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;tabs&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button id=&quot;tabChat&quot; class=&quot;active&quot;]]]Chat[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button id=&quot;tabDashboards&quot;]]]Dashboards[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button id=&quot;tabFavorites&quot;]]]Favorites[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[button id=&quot;tabDQ&quot;]]]Data quality[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[!-- Chat view --]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div id=&quot;viewChat&quot; class=&quot;view active&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;messages&quot; id=&quot;messages&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div id=&quot;activity&quot; class=&quot;activity&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[span class=&quot;step&quot; id=&quot;stepPlan&quot;]]]Planning[[[/span]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[span class=&quot;step&quot; id=&quot;stepExec&quot;]]]Executing[[[/span]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[span class=&quot;step&quot; id=&quot;stepSumm&quot;]]]Summarizing[[[/span]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[span class=&quot;dots&quot;]]][[[span]]].[[[/span]]][[[span]]].[[[/span]]][[[span]]].[[[/span]]][[[/span]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[!-- Suggestions overlay --]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;suggest-overlay&quot; id=&quot;suggestOverlay&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[div class=&quot;suggest-panel&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [[[div class=&quot;suggest-grid&quot; id=&quot;suggestGrid&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[!-- Composer --]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;composer-wrap&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[div class=&quot;composer&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [[[textarea id=&quot;nlInput&quot; rows=&quot;1&quot; placeholder=&#39;Ask your data... e.g., &quot;Create dashboard for applications&quot;&#39;]]][[[/textarea]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [[[button id=&quot;askBtn&quot; class=&quot;send&quot; title=&quot;Send&quot;]]]✈️[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[!-- Dashboards --]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div id=&quot;viewDashboards&quot; class=&quot;view&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;messages&quot; id=&quot;dashMessages&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[!-- Favorites --]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div id=&quot;viewFavorites&quot; class=&quot;view&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;messages&quot; id=&quot;favMessages&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[!-- Data Quality --]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div id=&quot;viewDQ&quot; class=&quot;view&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;panel&quot; style=&quot;border:none;&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[select id=&quot;dqTableSelect&quot; class=&quot;input&quot;]]][[[/select]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[button id=&quot;runDQBtn&quot; class=&quot;primary&quot;]]]Run data quality checks[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;messages&quot; id=&quot;dqMessages&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;[[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[[[!-- Modal --]]]&lt;/div&gt;&lt;div&gt;[[[div id=&quot;modal&quot; class=&quot;modal&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[div class=&quot;modal-content&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;modal-header&quot;]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[div id=&quot;modalTitle&quot;]]]Fullscreen[[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; [[[button class=&quot;close-btn&quot; id=&quot;closeModalBtn&quot;]]]Close[[[/button]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[div class=&quot;modal-body&quot; id=&quot;modalBody&quot;]]][[[/div]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; [[[/div]]]&lt;/div&gt;&lt;div&gt;[[[/div]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[[[script]]]&lt;/div&gt;&lt;div&gt;/* Chart plugins */&lt;/div&gt;&lt;div&gt;Chart.register(ChartDataLabels);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Globals */&lt;/div&gt;&lt;div&gt;let SQLModule, db;&lt;/div&gt;&lt;div&gt;let schemaCatalog = {};&lt;/div&gt;&lt;div&gt;let excelMetaMap = {};&lt;/div&gt;&lt;div&gt;let datasetKey = &#39;&#39;;&lt;/div&gt;&lt;div&gt;let dashboards = [];&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Helpers */&lt;/div&gt;&lt;div&gt;function log(msg){ const t=new Date().toLocaleString(); const el=document.getElementById(&#39;systemLog&#39;); el.textContent += `[${t}] ${msg}\n`; el.scrollTop=el.scrollHeight; }&lt;/div&gt;&lt;div&gt;function appendMessage(role, html){ const wrap=document.createElement(&#39;div&#39;); wrap.className=`msg ${role}`; const bubble=document.createElement(&#39;div&#39;); bubble.className=`bubble ${role}`; bubble.innerHTML=html; wrap.appendChild(bubble); const m=getActiveMessages(); m.appendChild(wrap); m.scrollTop=m.scrollHeight; return bubble; }&lt;/div&gt;&lt;div&gt;function getActiveMessages(){ const views={ viewChat:&#39;messages&#39;, viewDashboards:&#39;dashMessages&#39;, viewFavorites:&#39;favMessages&#39;, viewDQ:&#39;dqMessages&#39; }; const active=document.querySelector(&#39;.view.active&#39;).id; return document.getElementById(views[active]); }&lt;/div&gt;&lt;div&gt;function escapeHtml(s){ return String(s).replace(/[&amp;amp;[[[]]]&quot;&#39;]/g, m=]]]({&#39;&amp;amp;&#39;:&#39;&amp;amp;amp;&#39;,&#39;[[[&#39;:&#39;&amp;amp;lt;&#39;,&#39;]]]&#39;:&#39;&amp;amp;gt;&#39;,&#39;&quot;&#39;:&#39;&amp;amp;quot;&#39;,&quot;&#39;&quot;:&#39;&amp;amp;#39;&#39;}[m])); }&lt;/div&gt;&lt;div&gt;function stripFence(s){ if(!s) return &#39;&#39;; const m=s.trim().match(/^```(?:sql|html)?\s*([\s\S]*?)```$/i); return m?m[1].trim():s.trim(); }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Sidebar toggle */&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;toggleSidebar&#39;).onclick = ()=]]] document.getElementById(&#39;sidebar&#39;).classList.toggle(&#39;collapsed&#39;);&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;miniToggle&#39;).onclick = ()=]]] document.getElementById(&#39;sidebar&#39;).classList.toggle(&#39;collapsed&#39;);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Tabs */&lt;/div&gt;&lt;div&gt;function setActiveView(id){&lt;/div&gt;&lt;div&gt;&amp;nbsp; [&#39;viewChat&#39;,&#39;viewDashboards&#39;,&#39;viewFavorites&#39;,&#39;viewDQ&#39;].forEach(v=]]]document.getElementById(v).classList.remove(&#39;active&#39;));&lt;/div&gt;&lt;div&gt;&amp;nbsp; document.getElementById(id).classList.add(&#39;active&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; [&#39;tabChat&#39;,&#39;tabDashboards&#39;,&#39;tabFavorites&#39;,&#39;tabDQ&#39;].forEach(t=]]]document.getElementById(t).classList.remove(&#39;active&#39;));&lt;/div&gt;&lt;div&gt;&amp;nbsp; ({ viewChat:&#39;tabChat&#39;, viewDashboards:&#39;tabDashboards&#39;, viewFavorites:&#39;tabFavorites&#39;, viewDQ:&#39;tabDQ&#39; })[id] &amp;amp;&amp;amp; document.getElementById(({ viewChat:&#39;tabChat&#39;, viewDashboards:&#39;tabDashboards&#39;, viewFavorites:&#39;tabFavorites&#39;, viewDQ:&#39;tabDQ&#39; })[id]).classList.add(&#39;active&#39;);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;tabChat&#39;).onclick=()=]]]setActiveView(&#39;viewChat&#39;);&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;tabDashboards&#39;).onclick=()=]]]{ renderDashboardsChat(); setActiveView(&#39;viewDashboards&#39;); };&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;tabFavorites&#39;).onclick=()=]]]{ loadFavoritesChat(); setActiveView(&#39;viewFavorites&#39;); };&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;tabDQ&#39;).onclick=()=]]]{ populateDQTableSelect(); setActiveView(&#39;viewDQ&#39;); };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Activity */&lt;/div&gt;&lt;div&gt;function setActivity(show=true, phase=&#39;plan&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const el=document.getElementById(&#39;activity&#39;); el.style.display = show ? &#39;block&#39; : &#39;none&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const plan=document.getElementById(&#39;stepPlan&#39;), exec=document.getElementById(&#39;stepExec&#39;), summ=document.getElementById(&#39;stepSumm&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; plan.style.color=&#39;#a2b2c9&#39;; exec.style.color=&#39;#a2b2c9&#39;; summ.style.color=&#39;#a2b2c9&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(phase===&#39;plan&#39;) plan.style.color=&#39;#e7eef8&#39;; if(phase===&#39;exec&#39;) exec.style.color=&#39;#e7eef8&#39;; if(phase===&#39;summ&#39;) summ.style.color=&#39;#e7eef8&#39;;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* SQLite init */&lt;/div&gt;&lt;div&gt;async function initSQLite(){ SQLModule = await initSqlJs({ locateFile:f=]]]`https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.8.0/${f}` }); db = new SQLModule.Database(); log(&#39;SQLite initialized.&#39;); }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Sanitizer */&lt;/div&gt;&lt;div&gt;function sanitizeName(n){ return String(n).trim().replace(/\s+/g,&#39;_&#39;).replace(/[^\w]/g,&#39;&#39;).replace(/^(\d)/,&#39;_$1&#39;).toLowerCase(); }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Excel parsing */&lt;/div&gt;&lt;div&gt;function parseSheet(ws, name){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const arr = XLSX.utils.sheet_to_json(ws, { header: 1, raw: true, blankrows: false });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (!arr || !arr.length) return { rows: [], metaAdded: false };&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (arr[0].length === 2 &amp;amp;&amp;amp; arr[0][0] != null &amp;amp;&amp;amp; arr[0][1] != null) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for (const r of arr) { if (r[0] != null &amp;amp;&amp;amp; r[1] != null) excelMetaMap[String(r[0]).trim()] = String(r[1]).trim(); }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; log(`Metadata sheet &quot;${name}&quot; ingested (${arr.length} rows).`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return { rows: [], metaAdded: true };&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; const firstRow = arr[0] || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; const a1 = firstRow[0] == null ? &#39;&#39; : String(firstRow[0]).trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; const special = /^component$/i.test(a1) || /^connection$/i.test(a1);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; let headers = [], dataRows = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (special) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const trimmed = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for (let r = 1; r [[[ arr.length; r++) trimmed.push((arr[r] || []).slice(1));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!trimmed.length) return { rows: [], metaAdded: false };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; headers = trimmed[0].map(h =]]] sanitizeName(h ?? &#39;col&#39;));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for (let r = 1; r [[[ trimmed.length; r++) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const row = trimmed[r] || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const obj = {};&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; headers.forEach((h,i)=]]]obj[h] = row[i] ?? null);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (Object.values(obj).some(v =]]] v != null &amp;amp;&amp;amp; String(v).trim() !== &#39;&#39;)) dataRows.push(obj);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; headers = firstRow.map(h =]]] sanitizeName(h ?? &#39;col&#39;));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for (let r = 1; r [[[ arr.length; r++) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const row = arr[r] || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const obj = {};&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; headers.forEach((h,i)=]]]obj[h] = row[i] ?? null);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (Object.values(obj).some(v =]]] v != null &amp;amp;&amp;amp; String(v).trim() !== &#39;&#39;)) dataRows.push(obj);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { rows: dataRows, metaAdded: false };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;function buildDDL(name, rows){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const table = sanitizeName(name);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const colSet = new Set();&lt;/div&gt;&lt;div&gt;&amp;nbsp; rows.forEach(r =]]] Object.keys(r).forEach(k =]]] colSet.add(sanitizeName(k))));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const columns = Array.from(colSet).map(c =]]] ({ name:c, type:&#39;TEXT&#39; }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const ddl = `CREATE TABLE &quot;${table}&quot; (${columns.map(c=]]]`&quot;${c.name}&quot; ${c.type}`).join(&#39;, &#39;)});`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { ddl, columns, table };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;function insertRows(table, rows, columns){&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (!rows.length) return;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const cols = columns.map(c=]]]`&quot;${c.name}&quot;`).join(&#39;, &#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const placeholders = columns.map(()=]]]&#39;?&#39;).join(&#39;, &#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const stmt = db.prepare(`INSERT INTO &quot;${table}&quot; (${cols}) VALUES (${placeholders});`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; db.run(&#39;BEGIN;&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; rows.forEach(r =]]] stmt.run(columns.map(c =]]] {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const v = r[c.name];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return (v !== null &amp;amp;&amp;amp; typeof v === &#39;object&#39;) ? JSON.stringify(v) : (v ?? null);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; })));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; db.run(&#39;COMMIT;&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; } catch (e) { db.run(&#39;ROLLBACK;&#39;); throw e; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; finally { stmt.free(); }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Schema render + datasetKey */&lt;/div&gt;&lt;div&gt;function renderSchema(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const panel = document.getElementById(&#39;schemaPanel&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const names = Object.keys(schemaCatalog);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (!names.length) { panel.textContent = &#39;No tables loaded.&#39;; datasetKey=&#39;&#39;; return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; const lines = names.map(t =]]] `${t}: ${schemaCatalog[t].columns.map(c=]]]c.name).join(&#39;, &#39;)}`).join(&#39;\n&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; panel.textContent = lines;&lt;/div&gt;&lt;div&gt;&amp;nbsp; datasetKey = btoa(lines).slice(0,128);&lt;/div&gt;&lt;div&gt;&amp;nbsp; generateSuggestions();&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Suggestions */&lt;/div&gt;&lt;div&gt;function generateSuggestions(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const names = Object.keys(schemaCatalog);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const relText=document.getElementById(&#39;metaRelationships&#39;).value.trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; let rel={}; try{ if(relText) rel = JSON.parse(relText); }catch{}&lt;/div&gt;&lt;div&gt;&amp;nbsp; const prime=[]; const secondary=[];&lt;/div&gt;&lt;div&gt;&amp;nbsp; names.forEach(t=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const cols = schemaCatalog[t].columns.map(c=]]]c.name);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const hasDate = cols.some(c=]]]/date|created|updated|time/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const hasOwner = cols.some(c=]]]/owner|user|assignee|account/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const hasStatus = cols.some(c=]]]/status|state|phase/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const hasCategory = cols.some(c=]]]/category|type|segment|region/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (hasStatus) prime.push(`Status breakdown in ${t}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (hasCategory) prime.push(`Category distribution in ${t}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (hasDate) prime.push(`Monthly trend in ${t}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (hasOwner) prime.push(`Top owners in ${t}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; Object.keys(rel).forEach(k=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const [rt, rc]=k.split(&#39;.&#39;); if(rt===t){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; rel[k].forEach(target=]]]{ const [tt, tc]=target.split(&#39;.&#39;); prime.push(`Join ${t} ↔ ${tt} by ${rc}=${tc}`); });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; secondary.push(`Top 10 records in ${t}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; cols.forEach(c=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (/name|status|category|type|owner|segment|region/i.test(c)) secondary.push(`Count ${c} group by ${c} in ${t}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; const top = Array.from(new Set(prime)).slice(0,6);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tail = Array.from(new Set(secondary.filter(x=]]]!top.includes(x)))).slice(0,3);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const suggestions = [...top, ...tail];&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const overlay=document.getElementById(&#39;suggestOverlay&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const grid=document.getElementById(&#39;suggestGrid&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; grid.innerHTML=&#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; suggestions.forEach((s,i)=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const b=document.createElement(&#39;button&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; b.className=&#39;suggest-chip&#39;+(i[[[6?&#39; prime&#39;:&#39;&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; b.textContent=s;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; b.onclick=()=]]]{ overlay.style.display=&#39;none&#39;; document.getElementById(&#39;nlInput&#39;).value=s; document.getElementById(&#39;askBtn&#39;).click(); };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; grid.appendChild(b);&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Show suggestions while typing */&lt;/div&gt;&lt;div&gt;const nlInput=document.getElementById(&#39;nlInput&#39;);&lt;/div&gt;&lt;div&gt;nlInput.addEventListener(&#39;focus&#39;, ()=]]]{ document.getElementById(&#39;suggestOverlay&#39;).style.display=&#39;block&#39;; });&lt;/div&gt;&lt;div&gt;nlInput.addEventListener(&#39;input&#39;, ()=]]]{ document.getElementById(&#39;suggestOverlay&#39;).style.display=&#39;block&#39;; });&lt;/div&gt;&lt;div&gt;nlInput.addEventListener(&#39;blur&#39;, ()=]]]{ setTimeout(()=]]]document.getElementById(&#39;suggestOverlay&#39;).style.display=&#39;none&#39;, 200); });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* OpenAI chat */&lt;/div&gt;&lt;div&gt;async function openaiChat(messages){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const key=document.getElementById(&#39;openaiKey&#39;).value.trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; const model=document.getElementById(&#39;modelSelect&#39;).value;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (!key) throw new Error(&#39;OpenAI API key required.&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const res=await fetch(&#39;https://api.openai.com/v1/chat/completions&#39;,{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; method:&#39;POST&#39;,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; headers:{&#39;Content-Type&#39;:&#39;application/json&#39;,&#39;Authorization&#39;:`Bearer ${key}`},&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; body:JSON.stringify({model,messages,temperature:0})&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!res.ok){ throw new Error(await res.text()); }&lt;/div&gt;&lt;div&gt;&amp;nbsp; const j=await res.json();&lt;/div&gt;&lt;div&gt;&amp;nbsp; const content=j.choices?.[0]?.message?.content;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!content) throw new Error(&#39;Empty model response.&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; return content;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Guardrails */&lt;/div&gt;&lt;div&gt;function detectPII(text){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const findings = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b/i.test(text)) findings.push(&#39;Email&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{3}\)?[-.\s]?)\d{3}[-.\s]?\d{4}\b/.test(text)) findings.push(&#39;Phone&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\b(?:\d[ -]*?){13,16}\b/.test(text)) findings.push(&#39;Credit card-like&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\b\d{3}-\d{2}-\d{4}\b/.test(text)) findings.push(&#39;SSN-like&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; return findings;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;function detectPromptInjection(text){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const cues = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\bignore\s+previous\b/i.test(text)) cues.push(&#39;Prompt injection: ignore previous&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\boverride\b/i.test(text)) cues.push(&#39;Prompt injection: override&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\bforget\s+instructions\b/i.test(text)) cues.push(&#39;Prompt injection: forget instructions&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; return cues;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Schema text */&lt;/div&gt;&lt;div&gt;function buildSchemaText(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const lines = Object.keys(schemaCatalog).map(t=]]]`- ${t} (columns: ${schemaCatalog[t].columns.map(c=]]]c.name).join(&#39;, &#39;)})`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const excelMetaStr = JSON.stringify(excelMetaMap, null, 2);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const descText=document.getElementById(&#39;metaDescriptions&#39;).value.trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; const relText=document.getElementById(&#39;metaRelationships&#39;).value.trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; let desc=&#39;{}&#39;, rel=&#39;{}&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; try{ if(descText) desc = JSON.stringify(JSON.parse(descText), null, 2); }catch{}&lt;/div&gt;&lt;div&gt;&amp;nbsp; try{ if(relText) rel = JSON.stringify(JSON.parse(relText), null, 2); }catch{}&lt;/div&gt;&lt;div&gt;&amp;nbsp; return `Schema:&lt;/div&gt;&lt;div&gt;${lines.join(&#39;\n&#39;)}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Descriptions (manual JSON):&lt;/div&gt;&lt;div&gt;${desc}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Descriptions (Excel two-column sheet):&lt;/div&gt;&lt;div&gt;${excelMetaStr}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Relationships (manual JSON: &quot;table.column&quot; → [&quot;table.column&quot;, ...]):&lt;/div&gt;&lt;div&gt;${rel}`;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Prompts */&lt;/div&gt;&lt;div&gt;function buildPlanningPrompt(query){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const schemaMeta = buildSchemaText();&lt;/div&gt;&lt;div&gt;&amp;nbsp; const sys = `You are a reliable SQLite agent and planner.&lt;/div&gt;&lt;div&gt;- Understand intent from natural language.&lt;/div&gt;&lt;div&gt;- Produce one fenced SQL block (DDL, DML, SELECT).&lt;/div&gt;&lt;div&gt;- Use exact table/column names (lower_snake).&lt;/div&gt;&lt;div&gt;- Use relationship hints to join related tables.&lt;/div&gt;&lt;div&gt;- Choose appropriate charts (bar/line/donut/pie/scatter/bubble/stacked bar). Use heatmap or treemap only if clearly suitable.`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const usr = `User: ${query}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;${schemaMeta}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Return only:&lt;/div&gt;&lt;div&gt;\`\`\`sql&lt;/div&gt;&lt;div&gt;-- one or more statements&lt;/div&gt;&lt;div&gt;-- last SELECT (if present) should be the final result&lt;/div&gt;&lt;div&gt;\`\`\``;&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { messages:[{role:&#39;system&#39;,content:sys},{role:&#39;user&#39;,content:usr}] };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;function buildSummaryPrompt(question, result){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const sys = `You are a precise analyst. Return clean HTML (2–6 short paragraphs or bullet points).&lt;/div&gt;&lt;div&gt;- Use plain language; include counts, categories, dates, owners if present.&lt;/div&gt;&lt;div&gt;- Explain relationships if relevant.&lt;/div&gt;&lt;div&gt;- Do not invent facts beyond the data. HTML only.`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const usr = `Question:&lt;/div&gt;&lt;div&gt;${question}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Columns:&lt;/div&gt;&lt;div&gt;${result.columns.join(&#39;, &#39;)}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Sample rows (first 50):&lt;/div&gt;&lt;div&gt;${JSON.stringify(result.rows.slice(0,50))}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Schema+metadata:&lt;/div&gt;&lt;div&gt;${buildSchemaText()}`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { messages:[{role:&#39;system&#39;,content:sys},{role:&#39;user&#39;,content:usr}] };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Writes detection */&lt;/div&gt;&lt;div&gt;function isWriteStatement(s){ const t=s.trim().toLowerCase(); return /^(update|delete|insert|drop|alter|create|truncate|pragma|attach|vacuum)/.test(t); }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Execute SQL */&lt;/div&gt;&lt;div&gt;function executeSqlScript(sqlScript){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const statements = sqlScript.split(&#39;;&#39;).map(s=]]]s.trim()).filter(s=]]]s.length]]]0);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const execLog = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; let lastResult = { columns: [], rows: [] };&lt;/div&gt;&lt;div&gt;&amp;nbsp; for (let i=0;i[[[statements.length;i++){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const stmt = statements[i];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const out = db.exec(stmt);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; execLog.push({ index:i+1, stmt, type: out.length ? &#39;SELECT&#39; : &#39;NON-SELECT&#39;, rows: out.length ? out[0].values.length : 0 });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (out.length) lastResult = { columns: out[0].columns, rows: out[0].values };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; else { db.run(stmt); }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } catch (e) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; execLog.push({ index:i+1, stmt, error: e?.message || String(e) });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return { error: e?.message || String(e), execLog, result: { columns: [], rows: [] } };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { execLog, result: lastResult };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Table rendering with sorting */&lt;/div&gt;&lt;div&gt;function buildTableElement(result){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const container = document.createElement(&#39;div&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; container.className = &#39;results&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const table = document.createElement(&#39;table&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const thead=document.createElement(&#39;thead&#39;); const trh=document.createElement(&#39;tr&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; let sortState = { colIndex: null, dir: 1 };&lt;/div&gt;&lt;div&gt;&amp;nbsp; result.columns.forEach((c, idx) =]]] {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const th=document.createElement(&#39;th&#39;); th.textContent=c;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const sortIcon = document.createElement(&#39;span&#39;); sortIcon.className=&#39;sort&#39;; sortIcon.textContent=&#39;⇅&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; th.appendChild(sortIcon);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; th.onclick = ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (sortState.colIndex === idx) sortState.dir *= -1; else { sortState.colIndex = idx; sortState.dir = 1; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const rowsSorted = [...result.rows].sort((a,b)=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const av=a[idx], bv=b[idx];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const an = parseFloat(av), bn = parseFloat(bv);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const bothNum = !isNaN(an) &amp;amp;&amp;amp; !isNaN(bn);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (bothNum) return (an - bn) * sortState.dir;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return String(av||&#39;&#39;).localeCompare(String(bv||&#39;&#39;)) * sortState.dir;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; renderBody(rowsSorted);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; trh.appendChild(th);&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; thead.appendChild(trh); table.appendChild(thead);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tbody=document.createElement(&#39;tbody&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; function renderBody(rows){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tbody.innerHTML=&#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; rows.forEach(r =]]] {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const tr=document.createElement(&#39;tr&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; r.forEach(cell =]]] { const td=document.createElement(&#39;td&#39;); td.textContent = cell==null?&#39;&#39;:String(cell); tr.appendChild(td); });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; tbody.appendChild(tr);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; renderBody(result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; table.appendChild(tbody);&lt;/div&gt;&lt;div&gt;&amp;nbsp; container.appendChild(table);&lt;/div&gt;&lt;div&gt;&amp;nbsp; return container;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Chart inference (heatmap/treemap only when suitable) */&lt;/div&gt;&lt;div&gt;function inferChartSpec(columns, rows){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const n = columns.length;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const sample = rows.slice(0, Math.min(300, rows.length));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const isNumeric = idx =]]] sample.every(r =]]] r[idx]==null || (!isNaN(parseFloat(r[idx])) &amp;amp;&amp;amp; isFinite(r[idx])));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const isDateLike = idx =]]] sample.some(r =]]] /\d{4}-\d{2}-\d{2}/.test(String(r[idx])) || /\d{2}\/\d{2}\/\d{4}/.test(String(r[idx])));&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (n]]]=2 &amp;amp;&amp;amp; columns[0].toLowerCase().includes(&#39;source&#39;) &amp;amp;&amp;amp; columns[1].toLowerCase().includes(&#39;target&#39;)) return { type:&#39;network&#39;, x:0, y:1 };&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (n]]]=3 &amp;amp;&amp;amp; !isNumeric(0) &amp;amp;&amp;amp; !isNumeric(1) &amp;amp;&amp;amp; isNumeric(2)) return { type:&#39;heatmap&#39;, x:0, y:1, v:2 };&lt;/div&gt;&lt;div&gt;&amp;nbsp; for(let i=0;i[[[n;i++) if (!isNumeric(i)) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for(let j=0;j[[[n;j++) if (i!==j &amp;amp;&amp;amp; isNumeric(j) &amp;amp;&amp;amp; sample.length]]]=6) return { type:&#39;treemap&#39;, x:i, y:j };&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; for(let i=0;i[[[n;i++) if (isDateLike(i)) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for(let j=0;j[[[n;j++) if (i!==j &amp;amp;&amp;amp; isNumeric(j)) return { type:&#39;line&#39;, x:i, y:j };&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (n]]]=2 &amp;amp;&amp;amp; isNumeric(0) &amp;amp;&amp;amp; isNumeric(1)) return { type:&#39;scatter&#39;, x:0, y:1 };&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (n]]]=3 &amp;amp;&amp;amp; isNumeric(0) &amp;amp;&amp;amp; isNumeric(1) &amp;amp;&amp;amp; isNumeric(2)) return { type:&#39;bubble&#39;, x:0, y:1, v:2 };&lt;/div&gt;&lt;div&gt;&amp;nbsp; for(let i=0;i[[[n;i++) if (!isNumeric(i)) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for(let j=0;j[[[n;j++) if (i!==j &amp;amp;&amp;amp; isNumeric(j)) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const cats = Array.from(new Set(sample.map(r=]]]String(r[i]))));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (cats.length[[[=8) return { type:&#39;pie&#39;, x:i, y:j };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return { type:&#39;bar&#39;, x:i, y:j };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { type:&#39;table&#39; };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Chart rendering (with datalabels; heatmap axes; treemap fixed) */&lt;/div&gt;&lt;div&gt;function renderChart(canvas, spec, columns, rows){&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(spec.type===&#39;network&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const cy = cytoscape({ container: canvas.parentElement, style:[{selector:&#39;node&#39;,style:{&#39;background-color&#39;:&#39;#5aa9ff&#39;,&#39;label&#39;:&#39;data(label)&#39;,&#39;color&#39;:&#39;#000&#39;,&#39;font-size&#39;:&#39;10px&#39;}},{selector:&#39;edge&#39;,style:{&#39;line-color&#39;:&#39;#7b5cff&#39;}}], layout:{name:&#39;cose&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const nodes = new Map();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; rows.forEach(r=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const s=String(r[spec.x]), t=String(r[spec.y]);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if(!nodes.has(s)) cy.add({ data:{ id:s, label:s } });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if(!nodes.has(t)) cy.add({ data:{ id:t, label:t } });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; cy.add({ data:{ id:`${s}-]]]${t}`, source:s, target:t } });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; nodes.set(s,true); nodes.set(t,true);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; cy.layout({ name:&#39;cose&#39; }).run();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return { destroy: ()=]]]cy.destroy() };&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const ctx = canvas.getContext(&#39;2d&#39;); let chart;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const labels = rows.map(r=]]]String(r[spec.x]));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const values = rows.map(r=]]]parseFloat(r[spec.y]));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const color = &#39;#5aa9ff&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const bg = &#39;rgba(90,169,255,0.35)&#39;;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const commonOpts = {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; responsive:true, maintainAspectRatio:false,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; plugins:{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; legend:{ display:false },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; datalabels:{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; color:&#39;#fff&#39;, anchor:&#39;end&#39;, align:&#39;top&#39;,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; formatter: v=]]] (typeof v===&#39;number&#39; &amp;amp;&amp;amp; isFinite(v)) ? (Math.round(v*100)/100) : v&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; scales:{ x:{ ticks:{ color:&#39;#a2b2c9&#39; } }, y:{ ticks:{ color:&#39;#a2b2c9&#39; } } }&lt;/div&gt;&lt;div&gt;&amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(spec.type===&#39;bar&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, { type:&#39;bar&#39;, data:{ labels, datasets:[{ label: columns[spec.y], data: values, backgroundColor:bg, borderColor:color }] }, options: commonOpts });&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else if(spec.type===&#39;line&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, { type:&#39;line&#39;, data:{ labels, datasets:[{ label: columns[spec.y], data: values, borderColor:color, backgroundColor:bg, fill:false }] }, options: commonOpts });&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else if(spec.type===&#39;pie&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, { type:&#39;doughnut&#39;, data:{ labels, datasets:[{ data: values, backgroundColor: labels.map((_,i)=]]]`hsl(${(i*45)%360},70%,60%)`) }] }, options: { responsive:true, maintainAspectRatio:false, plugins:{ legend:{ display:true, position:&#39;bottom&#39; }, datalabels:{ color:&#39;#000&#39;, formatter:v=]]]v } } } });&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else if(spec.type===&#39;scatter&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const data = rows.map(r=]]]({ x:parseFloat(r[spec.x]), y:parseFloat(r[spec.y]) }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, { type:&#39;scatter&#39;, data:{ datasets:[{ label:`${columns[spec.y]} vs ${columns[spec.x]}`, data, backgroundColor:bg, borderColor:color }] }, options: commonOpts });&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else if(spec.type===&#39;bubble&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const data = rows.map(r=]]]({ x:parseFloat(r[spec.x]), y:parseFloat(r[spec.y]), r:Math.max(3, Math.min(18, Math.abs(parseFloat(r[spec.v]))||6)) }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, { type:&#39;bubble&#39;, data:{ datasets:[{ label:`${columns[spec.y]} vs ${columns[spec.x]}`, data, backgroundColor:bg, borderColor:color }] }, options: commonOpts });&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else if(spec.type===&#39;heatmap&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const xCats = Array.from(new Set(rows.map(r=]]]String(r[spec.x]))));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const yCats = Array.from(new Set(rows.map(r=]]]String(r[spec.y]))));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const matrixData = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; xCats.forEach((xc, xi)=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; yCats.forEach((yc, yi)=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const v = rows.filter(r=]]]String(r[spec.x])===xc &amp;amp;&amp;amp; String(r[spec.y])===yc).reduce((a,b)=]]]a + (parseFloat(b[spec.v])||0), 0);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; matrixData.push({ x: xi, y: yi, v });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; type: &#39;matrix&#39;,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; data: { datasets: [{ label:&#39;Heatmap&#39;, data: matrixData, borderWidth:1, borderColor:&#39;#223046&#39;,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; backgroundColor(ctx){ const v=ctx.dataset.data[ctx.dataIndex].v; const hue=Math.min(200, 50+v*5); return `hsl(${hue},70%,50%)`; },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; width: ({chart}) =]]] (chart.chartArea?.width || 0)/xCats.length - 2,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; height: ({chart}) =]]] (chart.chartArea?.height || 0)/yCats.length - 2&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }]},&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; options: {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; responsive:true, maintainAspectRatio:false,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; plugins:{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; legend:{ display:false },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tooltip:{ callbacks:{ title:(items)=]]]{ const i=items[0].dataIndex; const d=matrixData[i]; return `${xCats[d.x]} × ${yCats[d.y]}`; }, label:(item)=]]]`Value: ${item.raw.v}` } },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; datalabels:{ color:&#39;#fff&#39;, formatter:(v)=]]]v.v }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scales: {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; x:{ ticks:{ color:&#39;#a2b2c9&#39;, callback:(v)=]]]xCats[v] }, grid:{ display:true } },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; y:{ ticks:{ color:&#39;#a2b2c9&#39;, callback:(v)=]]]yCats[v] }, grid:{ display:true } }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; } else if(spec.type===&#39;treemap&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // Ensure plugin default exists&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; try { Chart.defaults.treemap = Chart.defaults.treemap || {}; } catch{}&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const data = rows.map(r=]]]({ label:String(r[spec.x]), value:parseFloat(r[spec.y])||0 }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; chart = new Chart(ctx, {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; type: &#39;treemap&#39;,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; data: { datasets: [{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tree: data, key: &#39;value&#39;, groups: [&#39;label&#39;], spacing:1,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; backgroundColor: (ctx)=]]]`hsl(${(ctx.dataIndex*45)%360},70%,55%)`,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; borderColor:&#39;#223046&#39;, borderWidth:1,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; labels:{ display:true, formatter:(ctx)=]]]`${ctx.raw._data.label}\n${ctx.raw.v}` },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; font:{ size:10 }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }] },&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; options: { responsive:true, maintainAspectRatio:false, plugins:{ legend:{ display:false } } }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; return { destroy: ()=]]]chart?.destroy?.() };&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Tile creation (DOM nodes with functional actions) */&lt;/div&gt;&lt;div&gt;function createTile({ title, description, type, result, spec, sqlBlock, onRefresh }){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tile = document.createElement(&#39;div&#39;); tile.className=&#39;tile&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const header = document.createElement(&#39;div&#39;); header.className=&#39;tile-header&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const hTitle = document.createElement(&#39;div&#39;); hTitle.className=&#39;tile-title&#39;; hTitle.textContent = title;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const actions = document.createElement(&#39;div&#39;); actions.className=&#39;tile-actions&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const btnMax = document.createElement(&#39;button&#39;); btnMax.className=&#39;icon-btn&#39;; btnMax.title=&#39;Maximize&#39;; btnMax.textContent=&#39;⤢&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const btnExplain = document.createElement(&#39;button&#39;); btnExplain.className=&#39;icon-btn&#39;; btnExplain.title=&#39;Explain&#39;; btnExplain.textContent=&#39;✎&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const btnMore = document.createElement(&#39;button&#39;); btnMore.className=&#39;icon-btn&#39;; btnMore.title=&#39;More&#39;; btnMore.textContent=&#39;⋯&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const moreWrap = document.createElement(&#39;div&#39;); moreWrap.className=&#39;more&#39;; moreWrap.appendChild(btnMore);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const moreMenu = document.createElement(&#39;div&#39;); moreMenu.className=&#39;more-menu&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const btnSave = document.createElement(&#39;button&#39;); btnSave.textContent=&#39;Save&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const btnRefresh = document.createElement(&#39;button&#39;); btnRefresh.textContent=&#39;Refresh&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const btnRemove = document.createElement(&#39;button&#39;); btnRemove.textContent=&#39;Remove&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const typeSelect = document.createElement(&#39;select&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; typeSelect.innerHTML = `&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;&quot;]]]Change chart type[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;bar&quot;]]]Bar[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;line&quot;]]]Line[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;pie&quot;]]]Donut[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;scatter&quot;]]]Scatter[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;bubble&quot;]]]Bubble[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;heatmap&quot;]]]Heatmap[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;treemap&quot;]]]Treemap[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [[[option value=&quot;table&quot;]]]Table[[[/option]]]&lt;/div&gt;&lt;div&gt;&amp;nbsp; `;&lt;/div&gt;&lt;div&gt;&amp;nbsp; moreMenu.append(btnSave, btnRefresh, btnRemove, typeSelect);&lt;/div&gt;&lt;div&gt;&amp;nbsp; moreWrap.appendChild(moreMenu);&lt;/div&gt;&lt;div&gt;&amp;nbsp; actions.append(btnMax, btnExplain, moreWrap);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const media = document.createElement(&#39;div&#39;); media.className=&#39;tile-media&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const desc = document.createElement(&#39;div&#39;); desc.className=&#39;tile-desc&#39;; desc.innerHTML = escapeHtml(description);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const explainEl = document.createElement(&#39;div&#39;); explainEl.className=&#39;explain&#39;; explainEl.style.display=&#39;none&#39;;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; tile.append(header, media, desc, explainEl);&lt;/div&gt;&lt;div&gt;&amp;nbsp; header.append(hTitle, actions);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; let destroyFn = null;&lt;/div&gt;&lt;div&gt;&amp;nbsp; function renderContent(res, sp){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; media.innerHTML=&#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if(sp.type===&#39;table&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const tableEl = buildTableElement(res);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; media.appendChild(tableEl);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } else if(sp.type===&#39;capability_map&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const grid=document.createElement(&#39;div&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; grid.style.display=&#39;grid&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; grid.style.gridTemplateColumns=&#39;repeat(auto-fill, minmax(160px, 1fr))&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; grid.style.gap=&#39;8px&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; res.rows.forEach(r=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const card=document.createElement(&#39;div&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; card.style.background=&#39;#121a27&#39;; card.style.border=&#39;1px solid var(--border)&#39;; card.style.borderRadius=&#39;10px&#39;; card.style.padding=&#39;8px&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const name=String(r[0]||&#39;Item&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const props = res.columns.slice(1).map((c,i)=]]]`${c}: ${String(r[i+1]||&#39;&#39;)}`).join(&#39;[[[br]]]&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; card.innerHTML = `[[[div style=&quot;font-weight:700;margin-bottom:6px;&quot;]]]${escapeHtml(name)}[[[/div]]][[[div style=&quot;font-size:12px;color:#a2b2c9;&quot;]]]${props}[[[/div]]]`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; grid.appendChild(card);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; media.appendChild(grid);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const canvas = document.createElement(&#39;canvas&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; canvas.style.width=&#39;100%&#39;; canvas.style.height=&#39;100%&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; media.appendChild(canvas);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const chartCtl = renderChart(canvas, sp, res.columns, res.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; destroyFn = chartCtl.destroy;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; renderContent(result, spec);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; btnMore.onclick = (e)=]]]{ e.stopPropagation(); moreMenu.style.display = moreMenu.style.display===&#39;block&#39; ? &#39;none&#39; : &#39;block&#39;; };&lt;/div&gt;&lt;div&gt;&amp;nbsp; document.addEventListener(&#39;click&#39;, ()=]]]{ moreMenu.style.display=&#39;none&#39;; });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; btnMax.onclick = ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const modal = document.getElementById(&#39;modal&#39;); const body=document.getElementById(&#39;modalBody&#39;); const titleEl=document.getElementById(&#39;modalTitle&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; body.innerHTML=&#39;&#39;; titleEl.textContent = title;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if(spec.type===&#39;table&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const tableEl = buildTableElement(result); tableEl.style.height=&#39;100%&#39;; body.appendChild(tableEl);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } else if(spec.type===&#39;capability_map&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const grid=document.createElement(&#39;div&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; grid.style.display=&#39;grid&#39;; grid.style.gridTemplateColumns=&#39;repeat(auto-fill, minmax(200px, 1fr))&#39;; grid.style.gap=&#39;8px&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; result.rows.forEach(r=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const card=document.createElement(&#39;div&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; card.style.background=&#39;#121a27&#39;; card.style.border=&#39;1px solid var(--border)&#39;; card.style.borderRadius=&#39;10px&#39;; card.style.padding=&#39;8px&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const name=String(r[0]||&#39;Item&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; const props = result.columns.slice(1).map((c,i)=]]]`${c}: ${String(r[i+1]||&#39;&#39;)}`).join(&#39;[[[br]]]&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; card.innerHTML = `[[[div style=&quot;font-weight:700;margin-bottom:6px;&quot;]]]${escapeHtml(name)}[[[/div]]][[[div style=&quot;font-size:12px;color:#a2b2c9;&quot;]]]${props}[[[/div]]]`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; grid.appendChild(card);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; body.appendChild(grid);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const canvas = document.createElement(&#39;canvas&#39;); canvas.style.width=&#39;100%&#39;; canvas.style.height=&#39;100%&#39;; body.appendChild(canvas);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; renderChart(canvas, spec, result.columns, result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; modal.style.display=&#39;flex&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; btnSave.onclick = ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const favs = JSON.parse(localStorage.getItem(&#39;favorites&#39;)||&#39;{}&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const list = favs[datasetKey] || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; list.push({ title, description, type: (spec.type===&#39;table&#39;?&#39;table&#39;:&#39;chart&#39;), spec, sqlBlock, timestamp: Date.now() });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; favs[datasetKey] = list;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; localStorage.setItem(&#39;favorites&#39;, JSON.stringify(favs));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; log(`Saved to favorites: ${title}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; moreMenu.style.display=&#39;none&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; btnRefresh.onclick = async ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if(onRefresh){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const newResult = await onRefresh(sqlBlock);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const newSpec = inferChartSpec(newResult.columns, newResult.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if(destroyFn) try{ destroyFn(); }catch{}&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; renderContent(newResult, newSpec);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; moreMenu.style.display=&#39;none&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; btnRemove.onclick = ()=]]]{ tile.remove(); moreMenu.style.display=&#39;none&#39;; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; typeSelect.onchange = ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const val = typeSelect.value;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if(!val) return;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const newSpec = { ...spec, type: val };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if(destroyFn) try{ destroyFn(); }catch{}&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; renderContent(result, newSpec);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; moreMenu.style.display=&#39;none&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; btnExplain.onclick = async ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; explainEl.style.display=&#39;block&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const question = title + &#39; — &#39; + description;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; try{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const { messages: sumMsgs } = buildSummaryPrompt(question, result);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const html = await openaiChat(sumMsgs);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; explainEl.innerHTML = html;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } catch(e){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const topLabel = result.columns[spec?.x ?? 0] || &#39;category&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const valLabel = result.columns[spec?.y ?? 1] || &#39;value&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; explainEl.textContent = `This shows ${valLabel} by ${topLabel}.`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; return tile;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Insert assistant response with summary + tiles horizontally */&lt;/div&gt;&lt;div&gt;function insertResponse(summaryHtml, tiles){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const bubble = appendMessage(&#39;assistant&#39;, summaryHtml ? summaryHtml : &#39;&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tilesRow = document.createElement(&#39;div&#39;); tilesRow.className=&#39;inline-tiles&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; tiles.forEach(t=]]]tilesRow.appendChild(t));&lt;/div&gt;&lt;div&gt;&amp;nbsp; bubble.appendChild(tilesRow);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Favorites chat view */&lt;/div&gt;&lt;div&gt;function loadFavoritesChat(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const favs = JSON.parse(localStorage.getItem(&#39;favorites&#39;)||&#39;{}&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const list = favs[datasetKey] || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; list.slice().reverse().forEach(item=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const result = executeSqlScript(item.sqlBlock).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const spec = item.spec &amp;amp;&amp;amp; item.spec.type ? item.spec : inferChartSpec(result.columns, result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:item.title, description:item.description||&#39;Saved favorite&#39;, type: spec.type===&#39;table&#39;?&#39;table&#39;:&#39;chart&#39;, result, spec, sqlBlock:item.sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; insertResponse(&#39;[[[strong]]]Favorites[[[/strong]]]&#39;, tiles);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Dashboards in chat */&lt;/div&gt;&lt;div&gt;function renderDashboardsChat(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; dashboards.forEach(d=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; d.items.forEach(it=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const result = executeSqlScript(it.sqlBlock).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const spec = it.spec &amp;amp;&amp;amp; it.spec.type ? it.spec : inferChartSpec(result.columns, result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; tiles.push(createTile({ title: it.title, description: it.description || &#39;Dashboard tile&#39;, type: spec.type===&#39;table&#39; ? &#39;table&#39; : &#39;chart&#39;, result, spec, sqlBlock:it.sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; insertResponse(`[[[strong]]]${escapeHtml(d.name)}[[[/strong]]]`, tiles);&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Auto dashboard */&lt;/div&gt;&lt;div&gt;function createAutoDashboard(name=&#39;Dashboard&#39;){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const timestamp = new Date().toLocaleString();&lt;/div&gt;&lt;div&gt;&amp;nbsp; const dashName = `${name} — ${timestamp}`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const items = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; const names = Object.keys(schemaCatalog);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!names.length){ appendMessage(&#39;assistant&#39;,&#39;No tables loaded to build a dashboard.&#39;); return; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const t = names[0];&lt;/div&gt;&lt;div&gt;&amp;nbsp; const cols = schemaCatalog[t].columns.map(c=]]]c.name);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const catCol = cols.find(c=]]]/category|type|segment|region/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const statusCol = cols.find(c=]]]/status|state|phase/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const dateCol = cols.find(c=]]]/date|created|updated|time/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const ownerCol = cols.find(c=]]]/owner|user|assignee|account/i.test(c));&lt;/div&gt;&lt;div&gt;&amp;nbsp; const nameCol = cols.find(c=]]]/name|application|app|title/i.test(c)) || cols[0];&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // KPI cards (as mini tables for simplicity and reliability)&lt;/div&gt;&lt;div&gt;&amp;nbsp; items.push({ title:&#39;Total records&#39;, description:&#39;Total row count&#39;, sqlBlock:`SELECT COUNT(*) AS total FROM &quot;${t}&quot;`, spec:{type:&#39;table&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(ownerCol) items.push({ title:&#39;Distinct owners&#39;, description:&#39;Unique owners&#39;, sqlBlock:`SELECT COUNT(DISTINCT &quot;${ownerCol}&quot;) AS owners FROM &quot;${t}&quot;`, spec:{type:&#39;table&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(catCol) items.push({ title:&#39;Distinct categories&#39;, description:&#39;Unique categories&#39;, sqlBlock:`SELECT COUNT(DISTINCT &quot;${catCol}&quot;) AS categories FROM &quot;${t}&quot;`, spec:{type:&#39;table&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(dateCol) items.push({ title:&#39;Latest activity&#39;, description:&#39;Most recent date&#39;, sqlBlock:`SELECT MAX(&quot;${dateCol}&quot;) AS latest_date FROM &quot;${t}&quot;`, spec:{type:&#39;table&#39;} });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // Charts&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (statusCol) items.push({ title:&#39;Status breakdown&#39;, description:&#39;Distribution of statuses&#39;, sqlBlock:`SELECT &quot;${statusCol}&quot; AS status, COUNT(*) AS count FROM &quot;${t}&quot; GROUP BY &quot;${statusCol}&quot; ORDER BY count DESC`, spec:{type:&#39;pie&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (catCol) items.push({ title:&#39;Category distribution&#39;, description:&#39;By category&#39;, sqlBlock:`SELECT &quot;${catCol}&quot; AS category, COUNT(*) AS count FROM &quot;${t}&quot; GROUP BY &quot;${catCol}&quot; ORDER BY count DESC`, spec:{type:&#39;bar&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (dateCol) items.push({ title:&#39;Monthly trend&#39;, description:&#39;Time series (counts)&#39;, sqlBlock:`SELECT substr(&quot;${dateCol}&quot;,1,7) AS month, COUNT(*) AS count FROM &quot;${t}&quot; GROUP BY month ORDER BY month`, spec:{type:&#39;line&#39;} });&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (ownerCol) items.push({ title:&#39;Top owners&#39;, description:&#39;Owners by count&#39;, sqlBlock:`SELECT &quot;${ownerCol}&quot; AS owner, COUNT(*) AS count FROM &quot;${t}&quot; GROUP BY &quot;${ownerCol}&quot; ORDER BY count DESC LIMIT 15`, spec:{type:&#39;bar&#39;} });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // Capability/Application map&lt;/div&gt;&lt;div&gt;&amp;nbsp; const mapSQL = `SELECT &quot;${nameCol}&quot; AS name, &quot;${statusCol||catCol||ownerCol||nameCol}&quot; AS prop1, &quot;${ownerCol||catCol||statusCol||nameCol}&quot; AS prop2 FROM &quot;${t}&quot; LIMIT 30`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; items.push({ title:&#39;Capability/Application map&#39;, description:&#39;Overview grid with properties&#39;, sqlBlock:mapSQL, spec:{type:&#39;capability_map&#39;} });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; dashboards.push({ name: dashName, items });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // Render immediately in chat&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; items.forEach(it=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const result = executeSqlScript(it.sqlBlock).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:it.title, description:it.description, type: it.spec.type===&#39;table&#39;?&#39;table&#39;:&#39;chart&#39;, result, spec:it.spec, sqlBlock:it.sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; insertResponse(`[[[strong]]]${escapeHtml(dashName)}[[[/strong]]]`, tiles);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Data Quality (tiles in chat) */&lt;/div&gt;&lt;div&gt;function populateDQTableSelect(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const sel=document.getElementById(&#39;dqTableSelect&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; sel.innerHTML=&#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; Object.keys(schemaCatalog).forEach(t=]]]{ const opt=document.createElement(&#39;option&#39;); opt.value=t; opt.textContent=t; sel.appendChild(opt); });&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;function runDataQuality(table){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; const cols = schemaCatalog[table]?.columns || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!cols.length){ appendMessage(&#39;assistant&#39;, &#39;No columns found for DQ.&#39;); return; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const nullDistinctSQL = `SELECT ${cols.map(c=]]]`SUM(CASE WHEN &quot;${c.name}&quot; IS NULL OR TRIM(&quot;${c.name}&quot;)=&#39;&#39; THEN 1 ELSE 0 END) AS ${c.name}_nulls, COUNT(DISTINCT &quot;${c.name}&quot;) AS ${c.name}_distincts`).join(&#39;, &#39;)} FROM &quot;${table}&quot;`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; tiles.push(createTile({ title:&#39;Nulls &amp;amp; distincts&#39;, description:&#39;Null/Distinct per column&#39;, type:&#39;table&#39;, result:executeSqlScript(nullDistinctSQL).result, spec:{type:&#39;table&#39;}, sqlBlock:nullDistinctSQL, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const idCols = cols.filter(c=]]]/id$|_id$|id_/i.test(c.name));&lt;/div&gt;&lt;div&gt;&amp;nbsp; idCols.forEach(ic=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const dupSQL = `SELECT &quot;${ic.name}&quot; AS id, COUNT(*) AS cnt FROM &quot;${table}&quot; GROUP BY &quot;${ic.name}&quot; HAVING COUNT(*)]]]1 ORDER BY cnt DESC LIMIT 100`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const resDup = executeSqlScript(dupSQL).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (resDup.rows.length) tiles.push(createTile({ title:`Duplicates in ${ic.name}`, description:&#39;Same ID appears multiple times&#39;, type:&#39;table&#39;, result:resDup, spec:{type:&#39;table&#39;}, sqlBlock:dupSQL, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const numCandidates = cols.filter(c=]]]c.name &amp;amp;&amp;amp; c.name.match(/amount|count|value|size|score|age|num|quantity|price|metric|total/i));&lt;/div&gt;&lt;div&gt;&amp;nbsp; numCandidates.forEach(c=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const valsRes = executeSqlScript(`SELECT &quot;${c.name}&quot; FROM &quot;${table}&quot; WHERE &quot;${c.name}&quot; IS NOT NULL`).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const vals = valsRes.rows.map(r=]]]parseFloat(r[0])).filter(v=]]]!isNaN(v)).sort((a,b)=]]]a-b);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if(vals.length]]]=10){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const q1 = vals[Math.floor(vals.length*0.25)];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const q3 = vals[Math.floor(vals.length*0.75)];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const iqr = q3-q1;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const lo = q1 - 1.5*iqr, hi = q3 + 1.5*iqr;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const outRows = executeSqlScript(`SELECT &quot;${c.name}&quot; AS value FROM &quot;${table}&quot; WHERE CAST(&quot;${c.name}&quot; AS REAL)[[[${lo} OR CAST(&quot;${c.name}&quot; AS REAL)]]]${hi} LIMIT 200`).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if(outRows.rows.length) tiles.push(createTile({ title:`Outliers in ${c.name}`, description:`Outside IQR ${lo.toFixed(2)}–${hi.toFixed(2)}`, type:&#39;table&#39;, result:outRows, spec:{type:&#39;table&#39;}, sqlBlock:`(IQR filter for ${c.name})`, onRefresh: async ()=]]]outRows }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const catAttr = Object.keys(excelMetaMap).find(k=]]]excelMetaMap[k].split(&#39;,&#39;).length]]]1);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(catAttr &amp;amp;&amp;amp; cols.some(c=]]]c.name===sanitizeName(catAttr))){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const attr = sanitizeName(catAttr);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const covSQL = `SELECT &quot;${attr}&quot; AS category, COUNT(*) AS count FROM &quot;${table}&quot; GROUP BY &quot;${attr}&quot; ORDER BY count DESC`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const res3 = executeSqlScript(covSQL).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const spec3 = inferChartSpec(res3.columns, res3.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:&#39;Category coverage&#39;, description:`Distribution over ${attr}`, type:&#39;chart&#39;, result:res3, spec: spec3.type===&#39;table&#39;?{type:&#39;bar&#39;,x:0,y:1}:spec3, sqlBlock:covSQL, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; insertResponse(`[[[strong]]]Data quality: ${escapeHtml(table)}[[[/strong]]]`, tiles);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* NL flow */&lt;/div&gt;&lt;div&gt;async function runNl(q){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const pii = detectPII(q);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const inj = detectPromptInjection(q);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (pii.length || inj.length) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const warnMsg = `Warning: Detected ${[...pii.map(x=]]]`PII: ${x}`), ...inj.map(x=]]]x)].join(&#39;, &#39;)}.\nProceed to send to LLM?`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const proceed = confirm(warnMsg);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!proceed) { appendMessage(&#39;assistant&#39;,&#39;Request cancelled due to guardrails.&#39;); return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; // Dashboard intent&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (/\bdashboard\b/i.test(q)) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; createAutoDashboard(&#39;Dashboard&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; appendMessage(&#39;assistant&#39;, &#39;Dashboard created. View it here or open the Dashboards tab.&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return;&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; appendMessage(&#39;user&#39;, escapeHtml(q));&lt;/div&gt;&lt;div&gt;&amp;nbsp; setActivity(true, &#39;plan&#39;);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const { messages } = buildPlanningPrompt(q);&lt;/div&gt;&lt;div&gt;&amp;nbsp; let sqlBlock = await openaiChat(messages);&lt;/div&gt;&lt;div&gt;&amp;nbsp; sqlBlock = stripFence(sqlBlock);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const allowWrites = document.getElementById(&#39;allowWrites&#39;).checked;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const stmts = sqlBlock.split(&#39;;&#39;).map(s=]]]s.trim()).filter(s=]]]s.length]]]0);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const hasWrite = stmts.some(isWriteStatement);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (hasWrite &amp;amp;&amp;amp; !allowWrites) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const proceed = confirm(&#39;This includes write/DDL statements. Proceed?&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!proceed) { appendMessage(&#39;assistant&#39;,&#39;Execution cancelled. Enable &quot;Allow writes&quot; to skip prompts.&#39;); setActivity(false); return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; setActivity(true, &#39;exec&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const exec = executeSqlScript(sqlBlock);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (exec.error) { appendMessage(&#39;assistant&#39;, `Error: ${escapeHtml(exec.error)}`); setActivity(false); return; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const mode = document.getElementById(&#39;responseMode&#39;).value;&lt;/div&gt;&lt;div&gt;&amp;nbsp; let summaryHtml = &#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (mode === &#39;summary&#39; || mode === &#39;both&#39;) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; setActivity(true, &#39;summ&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const { messages: sumMsgs } = buildSummaryPrompt(q, exec.result);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; summaryHtml = await openaiChat(sumMsgs);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } catch(e){ summaryHtml = `Summary unavailable: ${escapeHtml(e?.message||String(e))}`; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (summaryHtml) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; summaryHtml += `[[[span class=&quot;ref-badge&quot; title=&quot;${escapeHtml(`SQL:\n${sqlBlock}\n\nColumns: ${exec.result.columns.join(&#39;, &#39;)}\nRows: ${exec.result.rows.length}`)}&quot;]]]ref[[[/span]]]`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (mode === &#39;table&#39; || mode === &#39;tiles&#39; || mode === &#39;both&#39;) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const spec = inferChartSpec(exec.result.columns, exec.result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // Table tile always first&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:&#39;Tabular result&#39;, description:&#39;Query output (sortable)&#39;, type:&#39;table&#39;, result:exec.result, spec:{type:&#39;table&#39;}, sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; // Chart tile if applicable&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (spec.type!==&#39;table&#39; &amp;amp;&amp;amp; mode !== &#39;table&#39;) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const chartName = spec.type.charAt(0).toUpperCase()+spec.type.slice(1);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:`${chartName} chart`, description:`Auto visualization (${chartName})`, type:&#39;chart&#39;, result:exec.result, spec, sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; insertResponse(summaryHtml, tiles);&lt;/div&gt;&lt;div&gt;&amp;nbsp; setActivity(false);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Manual SQL flow */&lt;/div&gt;&lt;div&gt;async function runManual(sqlInput){&lt;/div&gt;&lt;div&gt;&amp;nbsp; let sqlBlock = stripFence(sqlInput);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const allowWrites = document.getElementById(&#39;allowWrites&#39;).checked;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const stmts = sqlBlock.split(&#39;;&#39;).map(s=]]]s.trim()).filter(s=]]]s.length]]]0);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const hasWrite = stmts.some(isWriteStatement);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (hasWrite &amp;amp;&amp;amp; !allowWrites) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const proceed = confirm(&#39;This includes write/DDL statements. Proceed?&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!proceed) { appendMessage(&#39;assistant&#39;,&#39;Execution cancelled.&#39;); return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; appendMessage(&#39;user&#39;, `[[[div class=&quot;code&quot;]]]${escapeHtml(sqlBlock)}[[[/div]]]`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; setActivity(true, &#39;exec&#39;);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const exec = executeSqlScript(sqlBlock);&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (exec.error) { appendMessage(&#39;assistant&#39;, `Error: ${escapeHtml(exec.error)}`); setActivity(false); return; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const mode = document.getElementById(&#39;responseMode&#39;).value;&lt;/div&gt;&lt;div&gt;&amp;nbsp; let summaryHtml = &#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (mode === &#39;summary&#39; || mode === &#39;both&#39;) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; setActivity(true, &#39;summ&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const { messages: sumMsgs } = buildSummaryPrompt(&#39;(Manual SQL)&#39;, exec.result);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; summaryHtml = await openaiChat(sumMsgs);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; } catch(e){ summaryHtml = `Summary unavailable: ${escapeHtml(e?.message||String(e))}`; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (mode === &#39;table&#39; || mode === &#39;tiles&#39; || mode === &#39;both&#39;) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const spec = inferChartSpec(exec.result.columns, exec.result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:&#39;Tabular result&#39;, description:&#39;Query output (sortable)&#39;, type:&#39;table&#39;, result:exec.result, spec:{type:&#39;table&#39;}, sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (spec.type!==&#39;table&#39; &amp;amp;&amp;amp; mode !== &#39;table&#39;) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const chartName = spec.type.charAt(0).toUpperCase()+spec.type.slice(1);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:`${chartName} chart`, description:`Auto visualization (${chartName})`, type:&#39;chart&#39;, result:exec.result, spec, sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; insertResponse(summaryHtml, tiles);&lt;/div&gt;&lt;div&gt;&amp;nbsp; setActivity(false);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Favorites */&lt;/div&gt;&lt;div&gt;function loadFavoritesChat(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; const favs = JSON.parse(localStorage.getItem(&#39;favorites&#39;)||&#39;{}&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; const list = favs[datasetKey] || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; const tiles = [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; list.slice().reverse().forEach(item=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const result = executeSqlScript(item.sqlBlock).result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const spec = item.spec &amp;amp;&amp;amp; item.spec.type ? item.spec : inferChartSpec(result.columns, result.rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; tiles.push(createTile({ title:item.title, description:item.description||&#39;Saved favorite&#39;, type: spec.type===&#39;table&#39;?&#39;table&#39;:&#39;chart&#39;, result, spec, sqlBlock:item.sqlBlock, onRefresh: async (sql)=]]]executeSqlScript(sql).result }));&lt;/div&gt;&lt;div&gt;&amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; insertResponse(&#39;[[[strong]]]Favorites[[[/strong]]]&#39;, tiles);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Events */&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;askBtn&#39;).onclick = async ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; const q=document.getElementById(&#39;nlInput&#39;).value.trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!q) return;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (!Object.keys(schemaCatalog).length) { appendMessage(&#39;assistant&#39;,&#39;Please load an Excel file first.&#39;); return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; try { await runNl(q); } catch(e){ appendMessage(&#39;assistant&#39;, `Error: ${escapeHtml(e?.message||String(e))}`); setActivity(false); }&lt;/div&gt;&lt;div&gt;&amp;nbsp; document.getElementById(&#39;nlInput&#39;).value=&#39;&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; document.getElementById(&#39;suggestOverlay&#39;).style.display=&#39;none&#39;;&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;runSqlBtn&#39;).onclick = async ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; const sql=document.getElementById(&#39;manualSql&#39;).value.trim();&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!sql) return;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if (!Object.keys(schemaCatalog).length) { appendMessage(&#39;assistant&#39;,&#39;Please load an Excel file first.&#39;); return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; try { await runManual(sql); } catch(e){ appendMessage(&#39;assistant&#39;, `Error: ${escapeHtml(e?.message||String(e))}`); setActivity(false); }&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;loadExcelBtn&#39;).onclick = async ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; const file=document.getElementById(&#39;excelInput&#39;).files[0];&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!file){ document.getElementById(&#39;loadStatus&#39;).textContent=&#39;Please select an Excel file.&#39;; return; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; document.getElementById(&#39;loadStatus&#39;).textContent=&#39;Reading Excel...&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!db) await initSQLite();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; excelMetaMap = {};&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const ab = await new Promise((resolve, reject)=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const reader=new FileReader();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; reader.onerror=()=]]]reject(new Error(&#39;Failed to read file&#39;));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; reader.onabort=()=]]]reject(new Error(&#39;File read aborted&#39;));&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; reader.onload=()=]]]resolve(reader.result);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; reader.readAsArrayBuffer(file);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const wb = XLSX.read(ab, { type:&#39;array&#39; });&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; const sheetNames = wb.SheetNames || [];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!sheetNames.length) { document.getElementById(&#39;loadStatus&#39;).textContent=&#39;No sheets found.&#39;; return; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; schemaCatalog = {};&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; let created=0;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for (const name of sheetNames){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const ws = wb.Sheets[name];&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const { rows, metaAdded } = parseSheet(ws, name);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (metaAdded) continue;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if (!rows.length){ log(`Sheet &quot;${name}&quot; empty after parsing; skipped.`); continue; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; const { ddl, columns, table } = buildDDL(name, rows);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; db.run(`DROP TABLE IF EXISTS &quot;${table}&quot;`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; db.run(ddl);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; insertRows(table, rows, columns);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; schemaCatalog[table] = { columns };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log(`Loaded sheet &quot;${name}&quot; as table &quot;${table}&quot; (${rows.length} rows).`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; created++;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; } catch(e) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; document.getElementById(&#39;loadStatus&#39;).textContent = `Error creating table &quot;${name}&quot;: ${e?.message||e}`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; log(`Error creating table &quot;${name}&quot;: ${e?.message||e}`);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; renderSchema();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; populateDQTableSelect();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; document.getElementById(&#39;loadStatus&#39;).textContent=`Loaded ${created} table(s).`;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; appendMessage(&#39;assistant&#39;, created ? &#39;Excel loaded. You can now talk to the database.&#39; : &#39;Excel parsed, but no data rows found.&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; } catch(e){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; document.getElementById(&#39;loadStatus&#39;).textContent=&#39;Error loading Excel: &#39;+(e?.message||String(e));&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;resetDbBtn&#39;).onclick = async ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; try {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if (!db) await initSQLite();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; try { db.close(); } catch {}&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; db = new SQLModule.Database();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; schemaCatalog = {};&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; excelMetaMap = {};&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; document.getElementById(&#39;schemaPanel&#39;).textContent=&#39;No tables loaded.&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; [&#39;messages&#39;,&#39;dashMessages&#39;,&#39;favMessages&#39;,&#39;dqMessages&#39;].forEach(id=]]]document.getElementById(id).innerHTML=&#39;&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; document.getElementById(&#39;loadStatus&#39;).textContent=&#39;Database reset.&#39;;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; appendMessage(&#39;assistant&#39;,&#39;Database reset. Please upload an Excel file to continue.&#39;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; } catch(e){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; document.getElementById(&#39;loadStatus&#39;).textContent=&#39;Error: &#39;+(e?.message||String(e));&lt;/div&gt;&lt;div&gt;&amp;nbsp; }&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;runDQBtn&#39;).onclick = ()=]]]{&lt;/div&gt;&lt;div&gt;&amp;nbsp; const t = document.getElementById(&#39;dqTableSelect&#39;).value;&lt;/div&gt;&lt;div&gt;&amp;nbsp; if(!t) return;&lt;/div&gt;&lt;div&gt;&amp;nbsp; runDataQuality(t);&lt;/div&gt;&lt;div&gt;};&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Modal */&lt;/div&gt;&lt;div&gt;document.getElementById(&#39;closeModalBtn&#39;).onclick = ()=]]]{ document.getElementById(&#39;modal&#39;).style.display=&#39;none&#39;; };&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;/* Init */&lt;/div&gt;&lt;div&gt;(async ()=]]]{ try { await initSQLite(); } catch(e){ log(&#39;Init error: &#39;+(e?.message||String(e))); } })();&lt;/div&gt;&lt;div&gt;[[[/script]]]&lt;/div&gt;&lt;div&gt;[[[/body]]]&lt;/div&gt;&lt;div&gt;[[[/html]]]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="whiteSpace=wrap;html=1;aspect=fixed;" parent="1" vertex="1">
          <mxGeometry x="90" y="-19620" width="80" height="80" as="geometry" />
        </mxCell>
        <mxCell id="cENY06w-exeQAe9jAUdj-3" value="" style="endArrow=classic;html=1;rounded=0;" parent="1" source="cENY06w-exeQAe9jAUdj-1" target="cENY06w-exeQAe9jAUdj-2" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="240" y="-19510" as="sourcePoint" />
            <mxPoint x="290" y="-19560" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="cENY06w-exeQAe9jAUdj-4" value="Vector1 DB" style="shape=cylinder3;whiteSpace=wrap;html=1;boundedLbl=1;backgroundOutline=1;size=15;" parent="1" vertex="1">
          <mxGeometry x="280" y="-19620" width="60" height="80" as="geometry" />
        </mxCell>
        <mxCell id="cENY06w-exeQAe9jAUdj-5" value="" style="endArrow=classic;startArrow=classic;html=1;rounded=0;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" source="cENY06w-exeQAe9jAUdj-2" target="cENY06w-exeQAe9jAUdj-4" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="240" y="-19510" as="sourcePoint" />
            <mxPoint x="290" y="-19560" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="cENY06w-exeQAe9jAUdj-6" value="" style="swimlane;startSize=0;" parent="1" vertex="1">
          <mxGeometry x="160" y="-19630" width="200" height="200" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
